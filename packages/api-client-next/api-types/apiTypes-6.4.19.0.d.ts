/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never;

export type paths = {
  "/account/address": {
    /**
     * Create a new address for a customer
     * Creates a new address for a customer.
     */
    post: operations["createCustomerAddress"];
  };
  "/account/address/{addressId}": {
    /**
     * Delete an address of a customer
     * Delete an address of customer.
     *
     *     Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.
     *
     *     **A customer must have at least one address (which can be used for shipping and billing).**
     *
     *     An automatic fallback is not applied.
     */
    delete: operations["deleteCustomerAddress"];
    /**
     * Modify an address of a customer
     * Modifies an existing address of a customer.
     */
    patch: operations["updateCustomerAddress"];
  };
  "/account/address/default-billing/{addressId}": {
    /**
     * Change a customer's default billing address
     * Updates the default (preselected) billing addresses of a customer.
     */
    patch: operations["defaultBillingAddress"];
  };
  "/account/address/default-shipping/{addressId}": {
    /**
     * Change a customer's default shipping address
     * Updates the default (preselected) shipping addresses of a customer.
     */
    patch: operations["defaultShippingAddress"];
  };
  "/account/change-email": {
    /**
     * Change the customer's email address
     * Changes a customer's email address to a new email address, using their current password as a validation.
     */
    post: operations["changeEmail"];
  };
  "/account/change-language": {
    /**
     * Change the customer's language.
     * Changes the language of the logged in customer
     */
    post: operations["changeLanguage"];
  };
  "/account/change-password": {
    /**
     * Change the customer's password
     * Changes a customer's password using their current password as a validation.
     */
    post: operations["changePassword"];
  };
  "/account/change-payment-method/{paymentMethodId}": {
    /**
     * Change the customer's default payment method
     * Changes a customer's default (preselected) payment method.
     */
    post: operations["changePaymentMethod"];
  };
  "/account/change-profile": {
    /**
     * Change the customer's information
     * Make changes to a customer's account, like changing their name, salutation or title.
     */
    post: operations["changeProfile"];
  };
  "/account/customer": {
    /**
     * Get information about current customer
     * Returns information about the current customer.
     */
    post: operations["readCustomer"];
    /**
     * Delete the customer's profile
     * Deletes a customer profile along with their addresses, wishlists and associated data. Created orders and their payment/shipping information (addresses) and reviews are not deleted.
     */
    delete: operations["deleteCustomer"];
  };
  "/account/customer-recovery-is-expired": {
    /**
     * Checks if the customer recovery entry for a given hash is expired.
     * This can be used to validate a provided hash has a valid and not expired customer recovery hash.
     */
    post: operations["getCustomerRecoveryIsExpired"];
  };
  "/account/list-address": {
    /**
     * Fetch addresses of a customer
     * Lists all addresses of the current customer and allows filtering them based on a criteria.
     */
    post: operations["listAddress"];
  };
  "/account/login": {
    /**
     * Log in a customer
     * Logs in customers given their credentials.
     */
    post: operations["loginCustomer"];
  };
  "/account/logout": {
    /**
     * Log out a customer
     * Logs out a customer.
     */
    post: operations["logoutCustomer"];
  };
  "/account/newsletter-recipient": {
    /**
     * Fetch newsletter recipients
     * Perform a filtered search for newsletter recipients.
     */
    post: operations["readNewsletterRecipient"];
  };
  "/account/recovery-password": {
    /**
     * Send a password recovery mail
     * This operation is Step 1 of the password reset flow. Make sure to implement Step 2 "Reset password with recovery credentials" in order to allow for the complete flow in your application. Sends a recovery mail containing a link with credentials that allows a customer to reset their password.
     */
    post: operations["sendRecoveryMail"];
  };
  "/account/recovery-password-confirm": {
    /**
     * Reset a password with recovery credentials
     * This operation is Step 2 of the password reset flow. It is required to conduct Step 1 "Send a password recovery mail" in order to obtain the required credentials for this step.Resets a customer's password using credentials from a password recovery mail as a validation.
     */
    post: operations["recoveryPassword"];
  };
  "/account/register": {
    /**
     * Register a customer
     * Registers a customer. Used both for normal customers and guest customers.See the Guide "Register a customer" for more information on customer registration.
     */
    post: operations["register"];
  };
  "/account/register-confirm": {
    /**
     * Confirm a customer registration
     * Confirms a customer registration when double opt-in is activated.
     *
     * Learn more about double opt-in registration in our guide "Register a customer".
     */
    post: operations["registerConfirm"];
  };
  "/category": {
    /**
     * Fetch a list of categories
     * Perform a filtered search for categories.
     */
    post: operations["readCategoryList"];
  };
  "/category/{navigationId}": {
    /**
     * Fetch a single category
     * This endpoint returns information about the category, as well as a fully resolved (hydrated with mapping values) CMS page, if one is assigned to the category. You can pass slots which should be resolved exclusively.
     */
    post: operations["readCategory"];
  };
  "/checkout/cart": {
    /**
     * Fetch or create a cart
     * Used to fetch the current cart or for creating a new one.
     */
    get: operations["readCart"];
    /**
     * Delete a cart
     * This route deletes the cart of the customer.
     */
    delete: operations["deleteCart"];
  };
  "/checkout/cart/line-item": {
    /**
     * Add items to the cart
     * This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
     */
    post: operations["addLineItem"];
    /**
     * Remove items from the cart
     * This route removes items from the cart and recalculates it.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
     */
    delete: operations["removeLineItem"];
    /**
     * Update items in the cart
     * This route updates items in the cart. A typical example is updating the quantity of an item.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
     */
    patch: operations["updateLineItem"];
  };
  "/checkout/order": {
    /**
     * Create an order from a cart
     * Creates a new order from the current cart and deletes the cart.
     *
     * If you are using the [prepared payment flow](https://developer.shopware.com/docs/concepts/commerce/checkout-concept/payments#2.1-prepare-payment-optional), this endpoint also receives additional transaction details. The exact name of the parameters depends on the implementation of the corresponding *payment handler*.
     */
    post: operations["createOrder"];
  };
  "/cms/{id}": {
    /**
     * Fetch and resolve a CMS page
     * Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.
     *
     * **Important notice**
     *
     * The criteria passed with this route also affects the listing, if there is one within the cms page.
     */
    post: operations["readCms"];
  };
  "/contact-form": {
    /**
     * Submit a contact form message
     * Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
     */
    post: operations["sendContactMail"];
  };
  "/context": {
    /**
     * Fetch the current context
     * Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more.
     */
    get: operations["readContext"];
    /**
     * Modify the current context
     * Used for switching the context. A typical example would be changing the language or changing the currency.
     */
    patch: operations["updateContext"];
  };
  "/country": {
    /**
     * Fetch countries
     * Perform a filtered search for countries
     */
    post: operations["readCountry"];
  };
  "/country-state/{countryId}": {
    /**
     * Fetch the states of a country
     * Perform a filtered search the states for a country
     */
    post: operations["readCountryState"];
  };
  "/currency": {
    /**
     * Fetch currencies
     * Perform a filtered search for currencies.
     */
    post: operations["readCurrency"];
  };
  "/customer-group-registration/config/{customerGroupId}": {
    /** Fetch registration settings for customer group */
    get: operations["getCustomerGroupRegistrationInfo"];
  };
  "/customer/wishlist": {
    /**
     * Fetch a wishlist
     * Fetch a customer's wishlist. Products on the wishlist can be filtered using a criteria object.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    post: operations["readCustomerWishlist"];
  };
  "/customer/wishlist/add/{productId}": {
    /**
     * Add a product to a wishlist
     * Adds a product to a customers wishlist.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    post: operations["addProductOnWishlist"];
  };
  "/customer/wishlist/delete/{productId}": {
    /**
     * Remove a product from a wishlist
     * Removes a product from a customer's wishlist.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    delete: operations["deleteProductOnWishlist"];
  };
  "/customer/wishlist/merge": {
    /**
     * Create a wishlist for a customer
     * Create a new wishlist for a logged in customer or extend the existing wishlist given a set of products.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * A customer can only have a single wishlist.
     *     * The wishlist feature has to be activated.
     */
    post: operations["mergeProductOnWishlist"];
  };
  "/document/download/{documentId}/{deepLinkCode}": {
    /**
     * Download generated document
     * Returns blob file of a generated document to download.
     */
    post: operations["download"];
  };
  "/handle-payment": {
    /**
     * Initiate a payment for an order
     * This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.
     *
     * The endpoint internally calls the payment handler of the payment method currently set for the order.
     */
    post: operations["handlePaymentMethod"];
  };
  "/landing-page/{landingPageId}": {
    /**
     * Fetch a landing page with the resolved CMS page
     * Loads a landing page by its identifier and resolves the CMS page.
     *
     * **Important notice**
     *
     * The criteria passed with this route also affects the listing, if there is one within the cms page.
     */
    post: operations["readLandingPage"];
  };
  "/language": {
    /**
     * Fetch languages
     * Perform a filtered search for languages.
     */
    post: operations["readLanguages"];
  };
  "/navigation/{activeId}/{rootId}": {
    /**
     * Fetch a navigation menu
     * This endpoint returns categories that can be used as a page navigation. You can either return them as a tree or as a flat list. You can also control the depth of the tree.
     *
     *     Instead of passing uuids, you can also use one of the following aliases for the activeId and rootId parameters to get the respective navigations of your sales channel.
     *
     *      * main-navigation
     *      * service-navigation
     *      * footer-navigation
     */
    post: operations["readNavigation"];
  };
  "/newsletter/confirm": {
    /**
     * Confirm a newsletter registration
     * You have to use the hash from the link sent out via email to confirm the user registration.
     */
    post: operations["confirmNewsletter"];
  };
  "/newsletter/subscribe": {
    /**
     * Create or remove a newsletter subscription
     * This route is used to create/remove/confirm a newsletter subscription.
     *
     * The `option` property controls what should happen:
     * * `direct`: The subscription is directly active and does not need a confirmation.
     * * `subscribe`: An email will be send to the provided email addrees containing a link to the /newsletter/confirm route.
     * The subscription is only successful, if the /newsletter/confirm route is called with the generated hashes.
     * * `unsubscribe`: The email address will be removed from the newsletter subscriptions.
     * * `confirmSubscribe`: Confirmes the newsletter subscription for the provided email address.
     */
    post: operations["subscribeToNewsletter"];
  };
  "/newsletter/unsubscribe": {
    /**
     * Remove a newsletter subscription
     * Removes a newsletter recipient from the mailing lists.
     */
    post: operations["unsubscribeToNewsletter"];
  };
  "/order": {
    /**
     * Fetch a list of orders
     * List orders of a customer.
     */
    post: operations["readOrder"];
  };
  "/order/download/{orderId}/{downloadId}": {
    /**
     * Download a purchased file
     * Download a file included in the given order and with the given id. Access must be granted.
     */
    get: operations["orderDownloadFile"];
  };
  "/order/payment": {
    /**
     * Update the payment method of an order
     * Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the `paymentChangeable`- array in the response.
     */
    post: operations["orderSetPayment"];
  };
  "/order/state/cancel": {
    /**
     * Cancel an order
     * Cancels an order. The order state will be set to 'cancelled'.
     */
    post: operations["cancelOrder"];
  };
  "/payment-method": {
    /** Loads all available payment methods */
    post: operations["readPaymentMethod"];
  };
  "/product": {
    /**
     * Fetch a list of products
     * List products that match the given criteria. For performance ressons a limit should always be set.
     */
    post: operations["readProduct"];
  };
  "/product-export/{accessKey}/{fileName}": {
    /** Export product export */
    get: operations["readProductExport"];
  };
  "/product-listing/{categoryId}": {
    /**
     * Fetch a product listing by category
     * Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
     */
    post: operations["readProductListing"];
  };
  "/product/{productId}": {
    /**
     * Fetch a single product
     * This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
     */
    post: operations["readProductDetail"];
  };
  "/product/{productId}/cross-selling": {
    /**
     * Fetch cross-selling groups of a product
     * This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
     */
    post: operations["readProductCrossSellings"];
  };
  "/product/{productId}/find-variant": {
    /**
     * Search for a matching variant by product options.
     * Performs a search for product variants and returns the best matching variant.
     */
    post: operations["searchProductVariantIds"];
  };
  "/product/{productId}/review": {
    /**
     * Save a product review
     * Saves a review for a product. Reviews have to be activated in the settings.
     */
    post: operations["saveProductReview"];
  };
  "/product/{productId}/reviews": {
    /**
     * Fetch product reviews
     * Perform a filtered search for product reviews.
     */
    post: operations["readProductReviews"];
  };
  "/salutation": {
    /**
     * Fetch salutations
     * Perform a filtered search for salutations.
     */
    post: operations["readSalutation"];
  };
  "/script/{hook}": {
    /** Access point for different api logics which are provided by apps over script hooks */
    post: operations["postScriptStoreApiRoute"];
  };
  "/search": {
    /**
     * Search for products
     * Performs a search for products which can be used to display a product listing.
     */
    post: operations["searchPage"];
  };
  "/search-suggest": {
    /**
     * Search for products (suggest)
     * Can be used to implement search previews or suggestion listings, that don’t require any interaction.
     */
    post: operations["searchSuggest"];
  };
  "/seo-url": {
    /**
     * Fetch SEO routes
     * Perform a filtered search for seo urls.
     */
    post: operations["readSeoUrl"];
  };
  "/shipping-method": {
    /**
     * Fetch shipping methods
     * Perform a filtered search for shipping methods.
     */
    post: operations["readShippingMethod"];
  };
  "/sitemap": {
    /**
     * Fetch sitemaps
     * Fetches a list of compressed sitemap files, which are often used by search engines.
     */
    get: operations["readSitemap"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    AccountNewsletterRecipientResult: components["schemas"]["Struct"] & {
      status?: string;
    };
    /** Added since version: 6.0.0.0 */
    AclRole: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.1.0 */
    App: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.1.0 */
    AppActionButton: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.15.0 */
    AppAdministrationSnippet: {
      appId: string;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      localeId: string;
      /** Format: date-time */
      updatedAt?: string;
      value: string;
    };
    /** Added since version: 6.4.2.0 */
    AppCmsBlock: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.10.0 */
    AppFlowAction: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.1.0 */
    AppPaymentMethod: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.10.3 */
    AppScriptCondition: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.1.0 */
    AppTemplate: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ArrayStruct: components["schemas"]["Struct"];
    /** Members of the attributes object ("attributes") represent information about the resource object in which it's defined. */
    attributes: {
      [key: string]: unknown | undefined;
    };
    Cart: components["schemas"]["ArrayStruct"] & {
      /** An affiliate tracking code */
      affiliateCode?: string;
      /** A campaign tracking code */
      campaignCode?: string;
      /** A comment that can be added to the cart. */
      customerComment?: string;
      /** A list of all cart errors, such as insufficient stocks, invalid addresses or vouchers. */
      errors?: {
        key?: string;
        level?: string;
        message?: string;
      }[];
      /** All items within the cart */
      lineItems?: components["schemas"]["LineItem"][];
      modified?: boolean;
      /** Name of the cart - for example `guest-cart` */
      name?: string;
      price?: {
        /**
         * Format: float
         * Net price of the cart
         */
        netPrice?: number;
        /**
         * Format: float
         * Price for all line items in the cart
         */
        positionPrice?: number;
        /** Tax calculation for the cart. One of `gross`, `net` or `tax-free` */
        taxStatus?: string;
        /**
         * Format: float
         * Total price of the cart, including shipping costs, discounts and taxes
         */
        totalPrice?: number;
      };
      /** Context token identifying the cart and the user session */
      token?: string;
      /** A list of all payment transactions associated with the current cart. */
      transactions?: {
        paymentMethodId?: string;
      }[];
    };
    CartItems: components["schemas"]["ArrayStruct"] & {
      items?: components["schemas"]["LineItem"][];
    };
    /** Added since version: 6.0.0.0 */
    Category: {
      active?: boolean;
      afterCategoryId?: string;
      afterCategoryVersionId?: string;
      breadcrumb?: readonly Record<string, never>[];
      /** Format: int64 */
      childCount?: number;
      children?: components["schemas"]["Category"];
      cmsPage?: components["schemas"]["CmsPage"];
      cmsPageId?: string;
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      displayNestedProducts: boolean;
      externalLink?: string;
      id?: string;
      internalLink?: string;
      keywords?: string;
      /** Format: int64 */
      level?: number;
      linkNewTab?: boolean;
      linkType?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      metaDescription?: string;
      metaTitle?: string;
      name: string;
      parent?: components["schemas"]["Category"];
      parentId?: string;
      parentVersionId?: string;
      path?: string;
      productAssignmentType: string;
      seoUrls?: components["schemas"]["SeoUrl"];
      translated?: Record<string, never>;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
      visible?: boolean;
    };
    /** Added since version: 6.0.0.0 */
    CategoryJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      afterCategoryId?: string;
      afterCategoryVersionId?: string;
      breadcrumb?: readonly Record<string, never>[];
      /** Format: int64 */
      childCount?: number;
      cmsPageId?: string;
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      displayNestedProducts: boolean;
      externalLink?: string;
      id?: string;
      internalLink?: string;
      keywords?: string;
      /** Format: int64 */
      level?: number;
      linkNewTab?: boolean;
      linkType?: string;
      mediaId?: string;
      metaDescription?: string;
      metaTitle?: string;
      name: string;
      parentId?: string;
      parentVersionId?: string;
      path?: string;
      productAssignmentType: string;
      relationships?: {
        children?: {
          data?: {
            /** @example c16587cd454342e296c7122c466859df */
            id?: string;
            /** @example category */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /category/ca8fee826bbf4292afbf47451b8366c3/children
             */
            related?: string;
          };
        };
        cmsPage?: {
          data?: {
            /** @example 2bf26a4bf983475d97580d31f97902b7 */
            id?: string;
            /** @example cms_page */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /category/ca8fee826bbf4292afbf47451b8366c3/cmsPage
             */
            related?: string;
          };
        };
        media?: {
          data?: {
            /** @example e3f1570168074e52a372d3b7cbb03e30 */
            id?: string;
            /** @example media */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /category/ca8fee826bbf4292afbf47451b8366c3/media
             */
            related?: string;
          };
        };
        parent?: {
          data?: {
            /** @example 4b04d319fcfe40c1ba9f227f2c1c50ed */
            id?: string;
            /** @example category */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /category/ca8fee826bbf4292afbf47451b8366c3/parent
             */
            related?: string;
          };
        };
        seoUrls?: {
          data?: {
            /** @example 5e36d9f233ac4fb69018b3f859fd4377 */
            id?: string;
            /** @example seo_url */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /category/ca8fee826bbf4292afbf47451b8366c3/seoUrls
             */
            related?: string;
          };
        };
      };
      translated?: Record<string, never>;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
      visible?: boolean;
    };
    /** Added since version: 6.0.0.0 */
    CmsBlock: {
      backgroundColor?: string;
      backgroundMedia?: components["schemas"]["Media"];
      backgroundMediaId?: string;
      backgroundMediaMode?: string;
      cmsSectionVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      cssClass?: string;
      customFields?: Record<string, never>;
      extensions?: {
        swagCmsExtensionsBlockRule?: {
          data?: {
            /** @example 8acb05037d28498b9c910c04d12c20b0 */
            id?: string;
            /** @example swag_cms_extensions_block_rule */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /cms-block/51c0fba463794453956fc7f5a8af9a7a/swagCmsExtensionsBlockRule
             */
            related?: string;
          };
        };
        swagCmsExtensionsQuickview?: {
          data?: {
            /** @example eb0cb925cb8747b5aa154371215fe4a2 */
            id?: string;
            /** @example swag_cms_extensions_quickview */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /cms-block/51c0fba463794453956fc7f5a8af9a7a/swagCmsExtensionsQuickview
             */
            related?: string;
          };
        };
      };
      id?: string;
      marginBottom?: string;
      marginLeft?: string;
      marginRight?: string;
      marginTop?: string;
      name?: string;
      /** Format: int64 */
      position: number;
      sectionId: string;
      sectionPosition?: string;
      slots?: components["schemas"]["CmsSlot"];
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
      visibility?: {
        desktop?: boolean;
        mobile?: boolean;
        tablet?: boolean;
      };
    };
    /** Added since version: 6.0.0.0 */
    CmsPage: {
      config?: {
        backgroundColor?: string;
      };
      /** Format: date-time */
      createdAt: string;
      cssClass?: string;
      customFields?: Record<string, never>;
      entity?: string;
      extensions?: {
        swagCmsExtensionsScrollNavigationPageSettings?: {
          data?: {
            /** @example 03e7e018f15247b891b29fbab808bdfc */
            id?: string;
            /** @example swag_cms_extensions_scroll_navigation_page_settings */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /cms-page/9c952dcb46834abf84e7cf27c723686d/swagCmsExtensionsScrollNavigationPageSettings
             */
            related?: string;
          };
        };
      };
      id?: string;
      landingPages?: components["schemas"]["LandingPage"];
      name?: string;
      previewMedia?: components["schemas"]["Media"];
      previewMediaId?: string;
      sections?: components["schemas"]["CmsSection"];
      translated?: Record<string, never>;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    CmsPageActivity: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    CmsPageDraft: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CmsSection: {
      backgroundColor?: string;
      backgroundMedia?: components["schemas"]["Media"];
      backgroundMediaId?: string;
      backgroundMediaMode?: string;
      blocks?: components["schemas"]["CmsBlock"];
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      cssClass?: string;
      customFields?: Record<string, never>;
      extensions?: {
        swagCmsExtensionsScrollNavigation?: {
          data?: {
            /** @example c7dcf804bb8d4daeab925ef31b15b999 */
            id?: string;
            /** @example swag_cms_extensions_scroll_navigation */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /cms-section/5b8abe3869b94c0489ddb971fcd49ec6/swagCmsExtensionsScrollNavigation
             */
            related?: string;
          };
        };
      };
      id?: string;
      mobileBehavior?: string;
      name?: string;
      page?: components["schemas"]["CmsPage"];
      pageId: string;
      /** Format: int64 */
      position: number;
      sizingMode?: string;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      visibility?: {
        desktop?: boolean;
        mobile?: boolean;
        tablet?: boolean;
      };
    };
    /** Added since version: 6.0.0.0 */
    CmsSlot: {
      block?: components["schemas"]["CmsBlock"];
      blockId: string;
      cmsBlockVersionId?: string;
      config?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      data?: Record<string, never>;
      id?: string;
      locked?: boolean;
      slot: string;
      translated?: Record<string, never>;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    ContextTokenResponse: {
      /** Context token identifying the current user session. */
      contextToken?: string;
    };
    /** Added since version: 6.0.0.0 */
    Country: {
      active?: boolean;
      addressFormat: Record<string, never>;
      advancedPostalCodePattern?: string;
      checkAdvancedPostalCodePattern?: boolean;
      checkPostalCodePattern?: boolean;
      checkVatIdPattern?: boolean;
      companyTax?: {
        /** Format: float */
        amount: number;
        currencyId: string;
        enabled: boolean;
      };
      /** @deprecated */
      companyTaxFree?: boolean;
      /** Format: date-time */
      createdAt: string;
      customerTax?: {
        /** Format: float */
        amount: number;
        currencyId: string;
        enabled: boolean;
      };
      customFields?: Record<string, never>;
      defaultPostalCodePattern?: string;
      displayStateInRegistration?: boolean;
      forceStateInRegistration?: boolean;
      id?: string;
      iso?: string;
      iso3?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      postalCodeRequired?: boolean;
      shippingAvailable?: boolean;
      states?: components["schemas"]["CountryState"];
      /** @deprecated */
      taxFree?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      vatIdPattern?: string;
      vatIdRequired?: boolean;
    };
    /** Added since version: 6.0.0.0 */
    CountryJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      addressFormat: Record<string, never>;
      advancedPostalCodePattern?: string;
      checkAdvancedPostalCodePattern?: boolean;
      checkPostalCodePattern?: boolean;
      checkVatIdPattern?: boolean;
      companyTax?: {
        /** Format: float */
        amount: number;
        currencyId: string;
        enabled: boolean;
      };
      /** @deprecated */
      companyTaxFree?: boolean;
      /** Format: date-time */
      createdAt: string;
      customerTax?: {
        /** Format: float */
        amount: number;
        currencyId: string;
        enabled: boolean;
      };
      customFields?: Record<string, never>;
      defaultPostalCodePattern?: string;
      displayStateInRegistration?: boolean;
      forceStateInRegistration?: boolean;
      id?: string;
      iso?: string;
      iso3?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      postalCodeRequired?: boolean;
      relationships?: {
        states?: {
          data?: {
            /** @example c4d6310c04e144249bba4ba6455466fb */
            id?: string;
            /** @example country_state */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /country/d49f9b072ac840b7b74384483c9c03aa/states
             */
            related?: string;
          };
        };
      };
      shippingAvailable?: boolean;
      /** @deprecated */
      taxFree?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      vatIdPattern?: string;
      vatIdRequired?: boolean;
    };
    /** Added since version: 6.0.0.0 */
    CountryState: {
      active?: boolean;
      countryId: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      shortCode: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CountryStateJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      countryId: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      shortCode: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Search parameters. For more information, see our documentation on [Search Queries](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#structure) */
    Criteria: {
      /** Used to perform aggregations on the search result. For more information, see [Search Queries > Aggregations](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#aggregations) */
      aggregations?: {
        /** The field you want to aggregate over. */
        field: string;
        /** Give your aggregation an identifier, so you can find it easier */
        name: string;
        /** The type of aggregation */
        type: string;
      }[];
      /** Used to fetch associations which are not fetched by default. */
      associations?: Record<string, never>;
      /** Fields which should be returned in the search result. */
      fields?: string[];
      /** List of filters to restrict the search result. For more information, see [Search Queries > Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#filter) */
      filter?: {
        field: string;
        type: string;
        value: string;
      }[];
      /** Perform groupings over certain fields */
      grouping?: string[];
      /** Number of items per result page */
      limit?: number;
      /** Search result page */
      page?: number;
      /** Filters that applied without affecting aggregations. For more information, see [Search Queries > Post Filter](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#post-filter) */
      "post-filter"?: {
        field: string;
        type: string;
        value: string;
      }[];
      /** Sorting in the search result. */
      sort?: {
        field: string;
        naturalSorting?: boolean;
        order?: string;
      }[];
      /**
       * Whether the total for the total number of hits should be determined for the search query. 0 = disabled total count, 1 = calculate exact total amount (slow), 2 = calculate only for next page (fast)
       * @default 0
       * @enum {integer}
       */
      "total-count-mode"?: 0 | 1 | 2;
    };
    CrossSellingElementCollection: {
      crossSelling?: {
        active?: boolean;
        /** Format: int32 */
        limit?: number;
        name?: string;
        /** Format: int32 */
        position?: number;
        productId?: string;
        productStreamId?: string;
        sortBy?: string;
        sortDirection?: string;
        type?: string;
      };
      products?: components["schemas"]["Product"][];
      /** Format: int32 */
      total?: number;
    }[];
    /** Added since version: 6.0.0.0 */
    Currency: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      /** Format: float */
      factor: number;
      id?: string;
      isoCode: string;
      /** Runtime field, cannot be used as part of the criteria. */
      isSystemDefault?: boolean;
      itemRounding: {
        /** Format: int64 */
        decimals?: number;
        /** Format: float */
        interval?: number;
        roundForNet?: boolean;
      };
      name: string;
      /** Format: int64 */
      position?: number;
      shortName: string;
      symbol: string;
      /** Format: float */
      taxFreeFrom?: number;
      totalRounding: {
        /** Format: int64 */
        decimals?: number;
        /** Format: float */
        interval?: number;
        roundForNet?: boolean;
      };
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.0.0 */
    CurrencyCountryRounding: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CurrencyJsonApi: components["schemas"]["resource"] & {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      /** Format: float */
      factor: number;
      id?: string;
      isoCode: string;
      /** Runtime field, cannot be used as part of the criteria. */
      isSystemDefault?: boolean;
      itemRounding: {
        /** Format: int64 */
        decimals?: number;
        /** Format: float */
        interval?: number;
        roundForNet?: boolean;
      };
      name: string;
      /** Format: int64 */
      position?: number;
      shortName: string;
      symbol: string;
      /** Format: float */
      taxFreeFrom?: number;
      totalRounding: {
        /** Format: int64 */
        decimals?: number;
        /** Format: float */
        interval?: number;
        roundForNet?: boolean;
      };
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.9.0 */
    CustomEntity: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Customer: {
      active?: boolean;
      addresses?: components["schemas"]["CustomerAddress"];
      affiliateCode?: string;
      birthday?: string;
      campaignCode?: string;
      company?: string;
      /** Format: date-time */
      createdAt: string;
      createdById?: string;
      customerNumber: string;
      customFields?: Record<string, never>;
      defaultBillingAddress?: components["schemas"]["CustomerAddress"];
      defaultBillingAddressId: string;
      defaultPaymentMethod?: components["schemas"]["PaymentMethod"];
      defaultPaymentMethodId: string;
      defaultShippingAddress?: components["schemas"]["CustomerAddress"];
      defaultShippingAddressId: string;
      /** Format: date-time */
      doubleOptInConfirmDate?: string;
      /** Format: date-time */
      doubleOptInEmailSentDate?: string;
      doubleOptInRegistration?: boolean;
      email: string;
      /** Format: date-time */
      firstLogin?: string;
      firstName: string;
      group?: components["schemas"]["CustomerGroup"];
      groupId: string;
      guest?: boolean;
      hash?: string;
      id?: string;
      language?: components["schemas"]["Language"];
      languageId: string;
      /** Format: date-time */
      lastLogin?: string;
      lastName: string;
      /** Format: date-time */
      lastOrderDate?: string;
      lastPaymentMethod?: components["schemas"]["PaymentMethod"];
      lastPaymentMethodId?: string;
      newsletter?: boolean;
      /** Format: int64 */
      orderCount?: number;
      /** Format: float */
      orderTotalAmount?: number;
      salesChannelId: string;
      salutation?: components["schemas"]["Salutation"];
      salutationId?: string;
      tagIds?: readonly string[];
      title?: string;
      /** Format: date-time */
      updatedAt?: string;
      updatedById?: string;
      vatIds?: string[];
    };
    /** Added since version: 6.0.0.0 */
    CustomerAddress: {
      additionalAddressLine1?: string;
      additionalAddressLine2?: string;
      city: string;
      company?: string;
      country?: components["schemas"]["Country"];
      countryId: string;
      countryState?: components["schemas"]["CountryState"];
      countryStateId?: string;
      /** Format: date-time */
      createdAt: string;
      customerId: string;
      customFields?: Record<string, never>;
      department?: string;
      firstName: string;
      id?: string;
      lastName: string;
      phoneNumber?: string;
      salutation?: components["schemas"]["Salutation"];
      salutationId?: string;
      street: string;
      title?: string;
      /** Format: date-time */
      updatedAt?: string;
      zipcode?: string;
    };
    /** Added since version: 6.0.0.0 */
    CustomerGroup: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      displayGross?: boolean;
      id?: string;
      name: string;
      registrationActive?: boolean;
      registrationIntroduction?: string;
      registrationOnlyCompanyRegistration?: boolean;
      registrationSeoMetaDescription?: string;
      registrationTitle?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.1.0.0 */
    CustomerRecovery: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CustomerTag: {
      customerId: string;
      id?: string;
      tag?: components["schemas"]["Tag"];
      tagId: string;
    };
    /** Added since version: 6.3.4.0 */
    CustomerWishlist: {
      /** Format: date-time */
      createdAt: string;
      customerId: string;
      customFields?: Record<string, never>;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.4.0 */
    CustomerWishlistProduct: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      productId: string;
      productVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CustomField: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CustomFieldSet: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    CustomFieldSetRelation: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    CustomPrice: {
      /** Format: date-time */
      createdAt: string;
      customer?: components["schemas"]["Customer"];
      customerGroup?: components["schemas"]["CustomerGroup"];
      customerGroupId?: string;
      customerId?: string;
      id?: string;
      price: Record<string, never>;
      product?: components["schemas"]["Product"];
      productId: string;
      productVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** The document's "primary data" is a representation of the resource or collection of resources targeted by a request. */
    data:
      | components["schemas"]["resource"]
      | components["schemas"]["resource"][];
    /** Added since version: 6.0.0.0 */
    DeadMessage: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    DeliveryTime: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      /** Format: int64 */
      max: number;
      /** Format: int64 */
      min: number;
      name: string;
      translated?: Record<string, never>;
      unit: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Document: {
      config: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      deepLinkCode: string;
      dependentDocuments?: components["schemas"]["Document"];
      documentMediaFile?: components["schemas"]["Media"];
      documentMediaFileId?: string;
      documentType?: components["schemas"]["DocumentType"];
      documentTypeId: string;
      fileType: string;
      id?: string;
      order?: components["schemas"]["Order"];
      orderId: string;
      orderVersionId?: string;
      referencedDocument?: components["schemas"]["Document"];
      referencedDocumentId?: string;
      sent?: boolean;
      static?: boolean;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    DocumentBaseConfig: {
      config?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      documentNumber?: string;
      documentTypeId: string;
      filenamePrefix?: string;
      filenameSuffix?: string;
      global: boolean;
      id?: string;
      logo?: components["schemas"]["Media"];
      logoId?: string;
      name: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    DocumentBaseConfigSalesChannel: {
      /** Format: date-time */
      createdAt: string;
      documentBaseConfigId: string;
      documentTypeId?: string;
      id?: string;
      salesChannelId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    DocumentType: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      technicalName: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    EntitySearchResult: components["schemas"]["ArrayStruct"] & {
      /** Contains aggregated data. A simple example is the determination of the average price from a product search query. */
      aggregations?: Record<string, never>[];
      entity?: string;
      /** The actual limit. This is used for pagination and goes together with the page. */
      limit?: number;
      /** The actual page. This can be used for pagination. */
      page?: number;
      /** The total number of found entities */
      total?: number;
    };
    error: {
      /** An application-specific error code, expressed as a string value. */
      code?: string;
      /** A human-readable explanation specific to this occurrence of the problem. */
      detail?: string;
      /** A unique identifier for this particular occurrence of the problem. */
      id?: string;
      links?: components["schemas"]["links"];
      meta?: components["schemas"]["meta"];
      source?: {
        /** A string indicating which query parameter caused the error. */
        parameter?: string;
        /** A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute]. */
        pointer?: string;
      };
      /** The HTTP status code applicable to this problem, expressed as a string value. */
      status?: string;
      /** A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization. */
      title?: string;
    };
    /** Added since version: 6.0.0.0 */
    EventAction: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    failure: {
      errors: components["schemas"]["error"][];
      links?: components["schemas"]["links"];
      meta?: components["schemas"]["meta"];
    };
    FindProductVariantRouteResponse: {
      foundCombination?: {
        options?: string[];
        variantId?: string;
      };
    };
    /** Added since version: 6.4.6.0 */
    Flow: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.6.0 */
    FlowSequence: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.18.0 */
    FlowTemplate: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ImportExportFile: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ImportExportLog: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ImportExportProfile: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    info: {
      jsonapi?: components["schemas"]["jsonapi"];
      links?: components["schemas"]["links"];
      meta: components["schemas"]["meta"];
    };
    /** Added since version: 6.0.0.0 */
    Integration: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** An object describing the server's implementation */
    jsonapi: {
      meta?: components["schemas"]["meta"];
      version?: string;
    };
    /** Added since version: 6.4.0.0 */
    LandingPage: {
      active?: boolean;
      cmsPage?: components["schemas"]["CmsPage"];
      cmsPageId?: string;
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      keywords?: string;
      metaDescription?: string;
      metaTitle?: string;
      name: string;
      seoUrls?: components["schemas"]["SeoUrl"];
      slotConfig?: Record<string, never>;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      url: string;
      versionId?: string;
    };
    /** Added since version: 6.4.0.0 */
    LandingPageJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      cmsPageId?: string;
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      keywords?: string;
      metaDescription?: string;
      metaTitle?: string;
      name: string;
      relationships?: {
        cmsPage?: {
          data?: {
            /** @example 5f620d92b24e4f559beba3865e45d76c */
            id?: string;
            /** @example cms_page */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /landing-page/e08a146ba8924df49776b7ff5625c9ae/cmsPage
             */
            related?: string;
          };
        };
        seoUrls?: {
          data?: {
            /** @example 1c2fdaf8859a4e84889a008ff62bcec9 */
            id?: string;
            /** @example seo_url */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /landing-page/e08a146ba8924df49776b7ff5625c9ae/seoUrls
             */
            related?: string;
          };
        };
      };
      slotConfig?: Record<string, never>;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      url: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    Language: {
      children?: components["schemas"]["Language"];
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      locale?: components["schemas"]["Locale"];
      localeId: string;
      name: string;
      parent?: components["schemas"]["Language"];
      parentId?: string;
      translationCode?: components["schemas"]["Locale"];
      translationCodeId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    LanguageJsonApi: components["schemas"]["resource"] & {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      localeId: string;
      name: string;
      parentId?: string;
      relationships?: {
        children?: {
          data?: {
            /** @example 97cbe651a14b478fbf2885e819476ccd */
            id?: string;
            /** @example language */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /language/6d005f49967b47ef9c5e5d96c136326a/children
             */
            related?: string;
          };
        };
        locale?: {
          data?: {
            /** @example 769a36700d4149c4bf9287268d4c9f29 */
            id?: string;
            /** @example locale */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /language/6d005f49967b47ef9c5e5d96c136326a/locale
             */
            related?: string;
          };
        };
        parent?: {
          data?: {
            /** @example 61a68598fb034215ac2fd299ff64ffd9 */
            id?: string;
            /** @example language */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /language/6d005f49967b47ef9c5e5d96c136326a/parent
             */
            related?: string;
          };
        };
        translationCode?: {
          data?: {
            /** @example f8f3f9beaaa54a10a6d50892f479784c */
            id?: string;
            /** @example locale */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /language/6d005f49967b47ef9c5e5d96c136326a/translationCode
             */
            related?: string;
          };
        };
      };
      translationCodeId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    LineItem: {
      description?: string;
      good?: boolean;
      id?: string;
      label?: string;
      modified?: boolean;
      /** Format: int32 */
      quantity?: number;
      referencedId?: string;
      removable?: boolean;
      stackable?: boolean;
      type?: string;
    };
    /** A link **MUST** be represented as either: a string containing the link's URL or a link object. */
    link: OneOf<
      [
        string,
        {
          /**
           * Format: uri-reference
           * A string containing the link's URL.
           */
          href: string;
          meta?: components["schemas"]["meta"];
        },
      ]
    >;
    /** The "type" and "id" to non-empty members. */
    linkage: {
      id: string;
      meta?: components["schemas"]["meta"];
      type: string;
    };
    links: {
      [key: string]: components["schemas"]["link"] | undefined;
    };
    /** Added since version: 6.0.0.0 */
    Locale: {
      code: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      territory: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    LogEntry: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MailHeaderFooter: {
      /** Format: date-time */
      createdAt: string;
      description?: string;
      footerHtml?: string;
      footerPlain?: string;
      headerHtml?: string;
      headerPlain?: string;
      id?: string;
      name: string;
      systemDefault?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MailTemplate: {
      contentHtml: string;
      contentPlain: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      mailTemplateType?: components["schemas"]["MailTemplateType"];
      media?: components["schemas"]["MailTemplateMedia"];
      senderName?: string;
      systemDefault?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MailTemplateMedia: {
      id?: string;
      languageId: string;
      mailTemplateId: string;
      media?: components["schemas"]["Media"];
      mediaId: string;
      /** Format: int64 */
      position?: number;
    };
    /** Added since version: 6.0.0.0 */
    MailTemplateType: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      technicalName: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.1.0.0 */
    MainCategory: {
      categoryId: string;
      categoryVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      productId: string;
      productVersionId?: string;
      salesChannelId: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.1.0.0 */
    MainCategoryJsonApi: components["schemas"]["resource"] & {
      categoryId: string;
      categoryVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      productId: string;
      productVersionId?: string;
      salesChannelId: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Media: {
      alt?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      fileExtension?: string;
      fileName?: string;
      /** Format: int64 */
      fileSize?: number;
      /** Runtime field, cannot be used as part of the criteria. */
      hasFile?: boolean;
      id?: string;
      metaData?: Record<string, never>;
      mimeType?: string;
      private?: boolean;
      thumbnails?: components["schemas"]["MediaThumbnail"];
      title?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      uploadedAt?: string;
      /** Runtime field, cannot be used as part of the criteria. */
      url?: string;
    };
    /** Added since version: 6.0.0.0 */
    MediaDefaultFolder: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MediaFolder: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MediaFolderConfiguration: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    MediaTag: {
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId: string;
      tag?: components["schemas"]["Tag"];
      tagId: string;
    };
    /** Added since version: 6.0.0.0 */
    MediaThumbnail: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      /** Format: int64 */
      height: number;
      id?: string;
      mediaId: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Runtime field, cannot be used as part of the criteria. */
      url?: string;
      /** Format: int64 */
      width: number;
    };
    /** Added since version: 6.0.0.0 */
    MediaThumbnailSize: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      /** Format: int64 */
      height: number;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      width: number;
    };
    /** Added since version: 6.0.0.0 */
    MessageQueueStats: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Non-standard meta-information that can not be represented as an attribute or relationship. */
    meta: {
      [key: string]: unknown | undefined;
    };
    NavigationRouteResponse: components["schemas"]["Category"][];
    /** Added since version: 6.0.0.0 */
    NewsletterRecipient: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    NewsletterRecipientJsonApi: components["schemas"]["resource"] & {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.7.0 */
    Notification: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    NumberRange: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    NumberRangeSalesChannel: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    NumberRangeState: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    NumberRangeType: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Order: {
      addresses?: components["schemas"]["OrderAddress"];
      affiliateCode?: string;
      /** Format: float */
      amountNet?: number;
      /** Format: float */
      amountTotal?: number;
      billingAddress?: components["schemas"]["OrderAddress"];
      billingAddressId: string;
      billingAddressVersionId?: string;
      campaignCode?: string;
      /** Format: date-time */
      createdAt: string;
      createdById?: string;
      currency?: components["schemas"]["Currency"];
      /** Format: float */
      currencyFactor: number;
      currencyId: string;
      customerComment?: string;
      customFields?: Record<string, never>;
      deepLinkCode?: string;
      deliveries?: components["schemas"]["OrderDelivery"];
      documents?: components["schemas"]["Document"];
      id?: string;
      language?: components["schemas"]["Language"];
      languageId: string;
      lineItems?: components["schemas"]["OrderLineItem"];
      orderCustomer?: components["schemas"]["OrderCustomer"];
      orderDate?: string;
      /** Format: date-time */
      orderDateTime: string;
      orderNumber?: string;
      /** Format: float */
      positionPrice?: number;
      price?: {
        calculatedTaxes?: Record<string, never>;
        /** Format: float */
        netPrice: number;
        /** Format: float */
        positionPrice: number;
        /** Format: float */
        rawTotal: number;
        taxRules?: Record<string, never>;
        taxStatus: string;
        /** Format: float */
        totalPrice: number;
      };
      salesChannelId: string;
      shippingCosts?: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      /** Format: float */
      shippingTotal?: number;
      stateMachineState?: components["schemas"]["StateMachineState"];
      tags?: components["schemas"]["Tag"];
      taxStatus?: string;
      transactions?: components["schemas"]["OrderTransaction"];
      /** Format: date-time */
      updatedAt?: string;
      updatedById?: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderAddress: {
      additionalAddressLine1?: string;
      additionalAddressLine2?: string;
      city: string;
      company?: string;
      country?: components["schemas"]["Country"];
      countryId: string;
      countryState?: components["schemas"]["CountryState"];
      countryStateId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      department?: string;
      firstName: string;
      id?: string;
      lastName: string;
      phoneNumber?: string;
      salutation?: components["schemas"]["Salutation"];
      street: string;
      title?: string;
      /** Format: date-time */
      updatedAt?: string;
      vatId?: string;
      versionId?: string;
      zipcode?: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderCustomer: {
      company?: string;
      /** Format: date-time */
      createdAt: string;
      customerNumber?: string;
      customFields?: Record<string, never>;
      email: string;
      firstName: string;
      id?: string;
      lastName: string;
      salutation?: components["schemas"]["Salutation"];
      salutationId: string;
      title?: string;
      /** Format: date-time */
      updatedAt?: string;
      vatIds?: string[];
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderDelivery: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      orderId: string;
      orderVersionId?: string;
      positions?: components["schemas"]["OrderDeliveryPosition"];
      shippingCosts?: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      /** Format: date-time */
      shippingDateEarliest: string;
      /** Format: date-time */
      shippingDateLatest: string;
      shippingMethod?: components["schemas"]["ShippingMethod"];
      shippingMethodId: string;
      shippingOrderAddress?: components["schemas"]["OrderAddress"];
      shippingOrderAddressId: string;
      shippingOrderAddressVersionId?: string;
      stateId: string;
      stateMachineState?: components["schemas"]["StateMachineState"];
      trackingCodes: string[];
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderDeliveryPosition: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      orderDeliveryId: string;
      orderDeliveryVersionId?: string;
      orderLineItemId: string;
      orderLineItemVersionId?: string;
      price?: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      /** Format: int64 */
      quantity?: number;
      /** Format: float */
      totalPrice?: number;
      /** Format: float */
      unitPrice?: number;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderLineItem: {
      children: components["schemas"]["OrderLineItem"];
      cover?: components["schemas"]["Media"];
      coverId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      downloads?: components["schemas"]["OrderLineItemDownload"];
      good?: boolean;
      id?: string;
      identifier: string;
      label: string;
      orderDeliveryPositions?: components["schemas"]["OrderDeliveryPosition"];
      orderId: string;
      orderVersionId?: string;
      parent?: components["schemas"]["OrderLineItem"];
      parentId?: string;
      parentVersionId?: string;
      payload?: Record<string, never>;
      /** Format: int64 */
      position: number;
      priceDefinition?: Record<string, never>;
      productId?: string;
      productVersionId?: string;
      /** Format: int64 */
      quantity: number;
      referencedId?: string;
      removable?: boolean;
      stackable?: boolean;
      states: string[];
      /** Format: float */
      totalPrice?: number;
      type?: string;
      /** Format: float */
      unitPrice?: number;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.4.19.0 */
    OrderLineItemDownload: {
      accessGranted: boolean;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId: string;
      orderLineItem?: components["schemas"]["OrderLineItem"];
      orderLineItemId: string;
      orderLineItemVersionId?: string;
      /** Format: int64 */
      position: number;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    OrderProductWarehouse: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    OrderRouteResponse: {
      orders?: Record<string, never>;
      /** The key-value pairs contain the uuid of the order as key and a boolean as value, indicating that the payment method can still be changed. */
      paymentChangeable?: {
        [key: string]: boolean | undefined;
      };
    };
    /** Added since version: 6.0.0.0 */
    OrderTag: {
      id?: string;
      order?: components["schemas"]["Order"];
      orderId: string;
      orderVersionId?: string;
      tag?: components["schemas"]["Tag"];
      tagId: string;
    };
    /** Added since version: 6.0.0.0 */
    OrderTransaction: {
      amount: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      captures?: components["schemas"]["OrderTransactionCapture"];
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      orderId: string;
      orderVersionId?: string;
      paymentMethod?: components["schemas"]["PaymentMethod"];
      paymentMethodId: string;
      stateId: string;
      stateMachineState?: components["schemas"]["StateMachineState"];
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.4.12.0 */
    OrderTransactionCapture: {
      amount: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      externalReference?: string;
      id?: string;
      orderTransactionId: string;
      orderTransactionVersionId?: string;
      refunds?: components["schemas"]["OrderTransactionCaptureRefund"];
      stateId: string;
      stateMachineState?: components["schemas"]["StateMachineState"];
      /**
       * Format: float
       * Runtime field, cannot be used as part of the criteria.
       */
      totalAmount?: number;
      transaction?: components["schemas"]["OrderTransaction"];
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.12.0 */
    OrderTransactionCaptureRefund: {
      amount: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      captureId: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      externalReference?: string;
      id?: string;
      positions?: components["schemas"]["OrderTransactionCaptureRefundPosition"];
      reason?: string;
      stateId: string;
      stateMachineState?: components["schemas"]["StateMachineState"];
      /**
       * Format: float
       * Runtime field, cannot be used as part of the criteria.
       */
      totalAmount?: number;
      transactionCapture?: components["schemas"]["OrderTransactionCapture"];
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.12.0 */
    OrderTransactionCaptureRefundPosition: {
      amount: {
        calculatedTaxes?: Record<string, never>;
        listPrice?: {
          /** Format: float */
          discount?: number;
          /** Format: float */
          percentage?: number;
          /** Format: float */
          price?: number;
        };
        /** Format: int64 */
        quantity: number;
        referencePrice?: Record<string, never>;
        regulationPrice?: {
          /** Format: float */
          price?: number;
        };
        taxRules?: Record<string, never>;
        /** Format: float */
        totalPrice: number;
        /** Format: float */
        unitPrice: number;
      };
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      externalReference?: string;
      id?: string;
      orderLineItem?: components["schemas"]["OrderLineItem"];
      orderLineItemId: string;
      orderLineItemVersionId?: string;
      orderTransactionCaptureRefund?: components["schemas"]["OrderTransactionCaptureRefund"];
      /** Format: int64 */
      quantity?: number;
      reason?: string;
      refundId: string;
      /**
       * Format: float
       * Runtime field, cannot be used as part of the criteria.
       */
      refundPrice?: number;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    OrderWarehouseGroup: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    pagination: {
      /**
       * Format: uri-reference
       * The first page of data
       */
      first?: string;
      /**
       * Format: uri-reference
       * The last page of data
       */
      last?: string;
      /**
       * Format: uri-reference
       * The next page of data
       */
      next?: string;
      /**
       * Format: uri-reference
       * The previous page of data
       */
      prev?: string;
    };
    /** Added since version: 6.0.0.0 */
    PaymentMethod: {
      active?: boolean;
      afterOrderEnabled?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      asynchronous?: boolean;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      distinguishableName?: string;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      /** Runtime field, cannot be used as part of the criteria. */
      prepared?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      refundable?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      synchronous?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PaymentMethodJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      afterOrderEnabled?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      asynchronous?: boolean;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      distinguishableName?: string;
      id?: string;
      mediaId?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      /** Runtime field, cannot be used as part of the criteria. */
      prepared?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      refundable?: boolean;
      relationships?: {
        media?: {
          data?: {
            /** @example e04e817661d54ba09bd0b2a72bad40d2 */
            id?: string;
            /** @example media */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /payment-method/cce09dc50f9f414a83ccc3db5fe71706/media
             */
            related?: string;
          };
        };
      };
      /** Runtime field, cannot be used as part of the criteria. */
      synchronous?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Plugin: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Product: {
      active?: boolean;
      available?: boolean;
      /** Format: int64 */
      availableStock?: number;
      calculatedCheapestPrice?: Record<string, never>;
      /**
       * Format: int64
       * Runtime field, cannot be used as part of the criteria.
       */
      calculatedMaxPurchase?: number;
      calculatedPrice?: Record<string, never>;
      calculatedPrices?: Record<string, never>[];
      canonicalProduct?: components["schemas"]["Product"];
      canonicalProductId?: string;
      categories?: components["schemas"]["Category"];
      categoriesRo?: components["schemas"]["Category"];
      categoryIds?: readonly string[];
      categoryTree?: readonly string[];
      /** Format: int64 */
      childCount?: number;
      children?: components["schemas"]["Product"];
      cmsPage?: components["schemas"]["CmsPage"];
      cmsPageId?: string;
      cmsPageVersionId?: string;
      configuratorSettings?: components["schemas"]["ProductConfiguratorSetting"];
      cover?: components["schemas"]["ProductMedia"];
      coverId?: string;
      /** Format: date-time */
      createdAt: string;
      crossSellings?: components["schemas"]["ProductCrossSelling"];
      customFields?: Record<string, never>;
      deliveryTime?: components["schemas"]["DeliveryTime"];
      deliveryTimeId?: string;
      description?: string;
      displayGroup?: string;
      downloads?: components["schemas"]["ProductDownload"];
      ean?: string;
      extensions?: {
        swagCustomizedProductsTemplate?: {
          data?: {
            /** @example be5aac4c232c4bd19d0062e98bfc7af7 */
            id?: string;
            /** @example swag_customized_products_template */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/swagCustomizedProductsTemplate
             */
            related?: string;
          };
        };
      };
      /** Format: float */
      height?: number;
      id?: string;
      isCloseout?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      isNew?: boolean;
      keywords?: string;
      /** Format: float */
      length?: number;
      mainCategories?: components["schemas"]["MainCategory"];
      /** @deprecated */
      mainVariantId?: string;
      manufacturer?: components["schemas"]["ProductManufacturer"];
      manufacturerId?: string;
      manufacturerNumber?: string;
      markAsTopseller?: boolean;
      /** Format: int64 */
      maxPurchase?: number;
      media?: components["schemas"]["ProductMedia"];
      metaDescription?: string;
      metaTitle?: string;
      /** Format: int64 */
      minPurchase?: number;
      name: string;
      optionIds?: readonly string[];
      options?: components["schemas"]["PropertyGroupOption"];
      packUnit?: string;
      packUnitPlural?: string;
      parent?: components["schemas"]["Product"];
      parentId?: string;
      parentVersionId?: string;
      productManufacturerVersionId?: string;
      productMediaVersionId?: string;
      productNumber: string;
      productReviews?: components["schemas"]["ProductReview"];
      properties?: components["schemas"]["PropertyGroupOption"];
      propertyIds?: readonly string[];
      /** Format: int64 */
      purchaseSteps?: number;
      /** Format: float */
      purchaseUnit?: number;
      /** Format: float */
      ratingAverage?: number;
      /** Format: float */
      referenceUnit?: number;
      /** Format: date-time */
      releaseDate?: string;
      /** Format: int64 */
      restockTime?: number;
      /** Format: int64 */
      sales?: number;
      seoCategory?: components["schemas"]["Category"];
      seoUrls?: components["schemas"]["SeoUrl"];
      shippingFree?: boolean;
      states?: readonly string[];
      /** Format: int64 */
      stock: number;
      streamIds?: readonly string[];
      streams?: components["schemas"]["ProductStream"];
      tax?: components["schemas"]["Tax"];
      taxId: string;
      translated?: Record<string, never>;
      unit?: components["schemas"]["Unit"];
      unitId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
      /** Format: float */
      weight?: number;
      /** Format: float */
      width?: number;
    };
    /** Added since version: 6.0.0.0 */
    ProductConfiguratorSetting: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      option?: components["schemas"]["PropertyGroupOption"];
      optionId: string;
      /** Format: int64 */
      position?: number;
      productId: string;
      productVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.1.0.0 */
    ProductCrossSelling: {
      active?: boolean;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: int64 */
      limit?: number;
      name: string;
      /** Format: int64 */
      position: number;
      sortBy?: string;
      sortDirection?: string;
      translated?: Record<string, never>;
      type: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.2.0.0 */
    ProductCrossSellingAssignedProducts: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Represents a product along with detailed information required to display a variant selection. */
    ProductDetailResponse: {
      /** List of property groups with their corresponding options and information on how to display them. */
      configurator?: components["schemas"]["PropertyGroup"][];
      product?: components["schemas"]["Product"];
    };
    /** Added since version: 6.4.19.0 */
    ProductDownload: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId: string;
      /** Format: int64 */
      position?: number;
      product?: components["schemas"]["Product"];
      productId: string;
      productVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.1.0.0 */
    ProductExport: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.0.0 */
    ProductFeatureSet: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      available?: boolean;
      /** Format: int64 */
      availableStock?: number;
      calculatedCheapestPrice?: Record<string, never>;
      /**
       * Format: int64
       * Runtime field, cannot be used as part of the criteria.
       */
      calculatedMaxPurchase?: number;
      calculatedPrice?: Record<string, never>;
      calculatedPrices?: Record<string, never>[];
      canonicalProductId?: string;
      categoryIds?: readonly string[];
      categoryTree?: readonly string[];
      /** Format: int64 */
      childCount?: number;
      cmsPageId?: string;
      cmsPageVersionId?: string;
      coverId?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      deliveryTimeId?: string;
      description?: string;
      displayGroup?: string;
      ean?: string;
      extensions?: {
        swagCustomizedProductsTemplate?: {
          data?: {
            /** @example be5aac4c232c4bd19d0062e98bfc7af7 */
            id?: string;
            /** @example swag_customized_products_template */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/swagCustomizedProductsTemplate
             */
            related?: string;
          };
        };
      };
      /** Format: float */
      height?: number;
      id?: string;
      isCloseout?: boolean;
      /** Runtime field, cannot be used as part of the criteria. */
      isNew?: boolean;
      keywords?: string;
      /** Format: float */
      length?: number;
      /** @deprecated */
      mainVariantId?: string;
      manufacturerId?: string;
      manufacturerNumber?: string;
      markAsTopseller?: boolean;
      /** Format: int64 */
      maxPurchase?: number;
      metaDescription?: string;
      metaTitle?: string;
      /** Format: int64 */
      minPurchase?: number;
      name: string;
      optionIds?: readonly string[];
      packUnit?: string;
      packUnitPlural?: string;
      parentId?: string;
      parentVersionId?: string;
      productManufacturerVersionId?: string;
      productMediaVersionId?: string;
      productNumber: string;
      propertyIds?: readonly string[];
      /** Format: int64 */
      purchaseSteps?: number;
      /** Format: float */
      purchaseUnit?: number;
      /** Format: float */
      ratingAverage?: number;
      /** Format: float */
      referenceUnit?: number;
      relationships?: {
        canonicalProduct?: {
          data?: {
            /** @example e0ffbd41cb7a42c4b7a2c3fb36b596dd */
            id?: string;
            /** @example product */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/canonicalProduct
             */
            related?: string;
          };
        };
        categories?: {
          data?: {
            /** @example 8fc84703e6a64e169cae7407c82cc267 */
            id?: string;
            /** @example category */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/categories
             */
            related?: string;
          };
        };
        categoriesRo?: {
          data?: {
            /** @example 5b33186fb5034e4f92410288ab9e0de2 */
            id?: string;
            /** @example category */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/categoriesRo
             */
            related?: string;
          };
        };
        children?: {
          data?: {
            /** @example 2aaef74b213948ffaaaf58fa51ea89bf */
            id?: string;
            /** @example product */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/children
             */
            related?: string;
          };
        };
        cmsPage?: {
          data?: {
            /** @example 56fd453653564899905ae79872cceae8 */
            id?: string;
            /** @example cms_page */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/cmsPage
             */
            related?: string;
          };
        };
        configuratorSettings?: {
          data?: {
            /** @example 8871db53868a473da2c0397105b7d2fc */
            id?: string;
            /** @example product_configurator_setting */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/configuratorSettings
             */
            related?: string;
          };
        };
        cover?: {
          data?: {
            /** @example e93bf951a5734b96a2d54ac336034907 */
            id?: string;
            /** @example product_media */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/cover
             */
            related?: string;
          };
        };
        crossSellings?: {
          data?: {
            /** @example 18d938fe9d5943acb6f478a08ff5a66a */
            id?: string;
            /** @example product_cross_selling */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/crossSellings
             */
            related?: string;
          };
        };
        deliveryTime?: {
          data?: {
            /** @example 8b07bc15f69d4e2bab6e97eaef1e7eaf */
            id?: string;
            /** @example delivery_time */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/deliveryTime
             */
            related?: string;
          };
        };
        downloads?: {
          data?: {
            /** @example 26533a24ec6c41e09b07eb7e019941cb */
            id?: string;
            /** @example product_download */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/downloads
             */
            related?: string;
          };
        };
        mainCategories?: {
          data?: {
            /** @example 7c7dddd002e341beae63d6072f326c8d */
            id?: string;
            /** @example main_category */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/mainCategories
             */
            related?: string;
          };
        };
        manufacturer?: {
          data?: {
            /** @example 033e799279c343049278a3ab8fe70d42 */
            id?: string;
            /** @example product_manufacturer */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/manufacturer
             */
            related?: string;
          };
        };
        media?: {
          data?: {
            /** @example 524979e9079d4441bea971f63a2e0cb4 */
            id?: string;
            /** @example product_media */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/media
             */
            related?: string;
          };
        };
        options?: {
          data?: {
            /** @example c2f6d71a14974da3b655810d732b402c */
            id?: string;
            /** @example property_group_option */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/options
             */
            related?: string;
          };
        };
        parent?: {
          data?: {
            /** @example 0dc9eef4d9574efe827887855f166ce0 */
            id?: string;
            /** @example product */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/parent
             */
            related?: string;
          };
        };
        productReviews?: {
          data?: {
            /** @example defdc0aba6534430bf4066f6dd97f6f0 */
            id?: string;
            /** @example product_review */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/productReviews
             */
            related?: string;
          };
        };
        properties?: {
          data?: {
            /** @example 5b62c474253e4f7e994d70171337b95c */
            id?: string;
            /** @example property_group_option */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/properties
             */
            related?: string;
          };
        };
        seoCategory?: {
          data?: {
            /** @example 5f7aedb5ba7a4245af6400f3fd22bf42 */
            id?: string;
            /** @example category */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/seoCategory
             */
            related?: string;
          };
        };
        seoUrls?: {
          data?: {
            /** @example 72a8eabc7063469ca7cb8808be814388 */
            id?: string;
            /** @example seo_url */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/seoUrls
             */
            related?: string;
          };
        };
        streams?: {
          data?: {
            /** @example af788a6ee2cd4785b18a074691038405 */
            id?: string;
            /** @example product_stream */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/streams
             */
            related?: string;
          };
        };
        tax?: {
          data?: {
            /** @example 6a8774b21c7044faa62fe2d42501df62 */
            id?: string;
            /** @example tax */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/tax
             */
            related?: string;
          };
        };
        unit?: {
          data?: {
            /** @example cec0b8e0db0b4a7198ed4960f4b005e8 */
            id?: string;
            /** @example unit */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /product/847eeef4cf504aaaa7834d65fa0866dd/unit
             */
            related?: string;
          };
        };
      };
      /** Format: date-time */
      releaseDate?: string;
      /** Format: int64 */
      restockTime?: number;
      /** Format: int64 */
      sales?: number;
      shippingFree?: boolean;
      states?: readonly string[];
      /** Format: int64 */
      stock: number;
      streamIds?: readonly string[];
      taxId: string;
      translated?: Record<string, never>;
      unitId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
      /** Format: float */
      weight?: number;
      /** Format: float */
      width?: number;
    };
    /** Added since version: 6.0.0.0 */
    ProductKeywordDictionary: {
      id?: string;
      keyword: string;
      languageId: string;
    };
    ProductListingCriteria: components["schemas"]["Criteria"] & {
      /** Number of items per result page. If not set, the limit will be set according to the default products per page, defined in the system settings. */
      limit?: number;
      /** Filter by manufacturers. List of manufacturer identifiers separated by a `|`. */
      manufacturer?: string;
      /**
       * Enables/disabled filtering by manufacturer. If set to false, the `manufacturer` filter will be ignored. Also the `aggregations[manufacturer]` key will be removed from the response.
       * @default true
       */
      "manufacturer-filter"?: boolean;
      /**
       * Filters by a maximum product price. Has to be higher than the `min-price` filter.
       * @default 0
       */
      "max-price"?: number;
      /**
       * Filters by a minimum product price. Has to be lower than the `max-price` filter.
       * @default 0
       */
      "min-price"?: number;
      /** Specifies the sorting of the products by `availableSortings`. If not set, the default sorting will be set according to the shop settings. The available sorting options are sent within the response under the `availableSortings` key. In order to sort by a field, consider using the `sort` parameter from the listing criteria. Do not use both parameters together, as it might lead to unexpected results. */
      order?: string;
      /**
       * Search result page
       * @default 1
       */
      p?: number;
      /**
       * Enables/disabled filtering by price. If set to false, the `min-price` and `max-price` filter will be ignored. Also the `aggregations[price]` key will be removed from the response.
       * @default true
       */
      "price-filter"?: boolean;
      /** Filters products by their properties. List of property identifiers separated by a `|`. */
      properties?: string;
      /**
       * Enables/disabled filtering by properties products. If set to false, the `properties` filter will be ignored. Also the `aggregations[properties]` key will be removed from the response.
       * @default true
       */
      "property-filter"?: boolean;
      /** A whitelist of property identifiers which can be used for filtering. List of property identifiers separated by a `|`. The `property-filter` must be `true`, otherwise the whitelist has no effect. */
      "property-whitelist"?: string;
      /** Filter products with a minimum average rating. */
      rating?: number;
      /**
       * Enables/disabled filtering by rating. If set to false, the `rating` filter will be ignored. Also the `aggregations[rating]` key will be removed from the response.
       * @default true
       */
      "rating-filter"?: boolean;
      /** By sending the parameter `reduce-aggregations` , the post-filters that were applied by the customer, are also applied to the aggregations. This has the consequence that only values are returned in the aggregations that would lead to further filter results. This parameter is a flag, the value has no effect. */
      "reduce-aggregations"?: string | null;
      /**
       * Filters products that are marked as shipping-free.
       * @default false
       */
      "shipping-free"?: boolean;
      /**
       * Enables/disabled filtering by shipping-free products. If set to false, the `shipping-free` filter will be ignored. Also the `aggregations[shipping-free]` key will be removed from the response.
       * @default true
       */
      "shipping-free-filter"?: boolean;
    };
    /** Additional flags for product listings */
    ProductListingFlags: {
      /** Resets all aggregations in the criteria. This parameter is a flag, the value has no effect. */
      "no-aggregations"?: string | null;
      /** If this flag is set, no products are fetched. Sorting and associations are also ignored. This parameter is a flag, the value has no effect. */
      "only-aggregations"?: string | null;
    };
    ProductListingResult: components["schemas"]["EntitySearchResult"] & {
      /** Contains the available sorting. These can be used to show a sorting select-box in the product listing. */
      availableSortings?: Record<string, never>[];
      /** Contains the state of the filters. These can be used to create listing filters. */
      currentFilters?: {
        manufacturer?: Record<string, never>[];
        navigationId?: string;
        price?: {
          max?: number;
          min?: number;
        };
        properties?: Record<string, never>[];
        rating?: number;
        "shipping-free"?: boolean;
      };
      elements?: components["schemas"]["Product"][];
      sorting?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductManufacturer: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      id?: string;
      link?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      name: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductMedia: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId: string;
      /** Format: int64 */
      position?: number;
      productId: string;
      productVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductPrice: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductReview: {
      comment?: string;
      content: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      languageId: string;
      /** Format: float */
      points?: number;
      productId: string;
      productVersionId?: string;
      salesChannelId: string;
      status?: boolean;
      title: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.5.0 */
    ProductSearchConfig: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.5.0 */
    ProductSearchConfigField: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductSearchKeyword: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.2.0 */
    ProductSorting: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      key: string;
      label: string;
      /** Format: int64 */
      priority: number;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductStream: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      id?: string;
      name: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductStreamFilter: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ProductVisibility: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    ProductWarehouse: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Promotion: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PromotionDiscount: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PromotionDiscountPrices: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PromotionIndividualCode: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PromotionSalesChannel: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PromotionSetgroup: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    PropertyGroup: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      displayType: string;
      filterable?: boolean;
      id?: string;
      name: string;
      options?: components["schemas"]["PropertyGroupOption"];
      /** Format: int64 */
      position?: number;
      sortingType: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      visibleOnProductDetailPage?: boolean;
    };
    /** Added since version: 6.0.0.0 */
    PropertyGroupOption: {
      colorHexCode?: string;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      group?: components["schemas"]["PropertyGroup"];
      groupId: string;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** A resource object **MAY** contain references to other resource objects ("relationships"). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object. */
    relationshipLinks: {
      related?: components["schemas"]["link"];
      self?: Record<string, never>[] & components["schemas"]["link"];
      [key: string]: unknown | undefined;
    };
    /** Members of the relationships object ("relationships") represent references from the resource object in which it's defined to other resource objects. */
    relationships:
      | Record<string, never>
      | Record<string, never>
      | Record<string, never>
      | {
          /** Member, whose value represents "resource linkage". */
          data?:
            | components["schemas"]["relationshipToOne"]
            | components["schemas"]["relationshipToMany"];
          links?: components["schemas"]["relationshipLinks"];
        };
    /** An array of objects each containing \"type\" and \"id\" members for to-many relationships. */
    relationshipToMany: components["schemas"]["linkage"][];
    relationshipToOne: Record<string, never> & components["schemas"]["linkage"];
    /** "Resource objects" appear in a JSON API document to represent resources. */
    resource: {
      attributes?: components["schemas"]["attributes"];
      id: string;
      links?: components["schemas"]["links"];
      meta?: components["schemas"]["meta"];
      relationships?: components["schemas"]["relationships"];
      type: string;
    };
    /** Added since version: 6.0.0.0 */
    Rule: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      extensions?: {
        warehouseGroup?: {
          data?: {
            /** @example 055936509b3a42ae9b675e82a089dbfd */
            id?: string;
            /** @example warehouse_group */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /rule/e760e9aa6a3e452d9a83154108a859a6/warehouseGroup
             */
            related?: string;
          };
        };
      };
      id?: string;
      name: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    RuleCondition: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SaasAppStorefrontConfig: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SaasSbpUserData: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SaasStorefrontDemoToken: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SaasUserLoginToken: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    SalesChannel: {
      active?: boolean;
      configuration?: Record<string, never>;
      country?: components["schemas"]["Country"];
      countryId: string;
      /** Format: date-time */
      createdAt: string;
      currency?: components["schemas"]["Currency"];
      currencyId: string;
      customerGroupId: string;
      customFields?: Record<string, never>;
      domains?: components["schemas"]["SalesChannelDomain"];
      footerCategory?: components["schemas"]["Category"];
      footerCategoryId?: string;
      footerCategoryVersionId?: string;
      hreflangActive?: boolean;
      hreflangDefaultDomain?: components["schemas"]["SalesChannelDomain"];
      hreflangDefaultDomainId?: string;
      id?: string;
      language?: components["schemas"]["Language"];
      languageId: string;
      mailHeaderFooterId?: string;
      maintenance?: boolean;
      name: string;
      navigationCategory?: components["schemas"]["Category"];
      /** Format: int64 */
      navigationCategoryDepth?: number;
      navigationCategoryId: string;
      navigationCategoryVersionId?: string;
      paymentMethod?: components["schemas"]["PaymentMethod"];
      paymentMethodId: string;
      serviceCategory?: components["schemas"]["Category"];
      serviceCategoryId?: string;
      serviceCategoryVersionId?: string;
      shippingMethod?: components["schemas"]["ShippingMethod"];
      shippingMethodId: string;
      shortName?: string;
      taxCalculationType?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.2.0.0 */
    SalesChannelAnalytics: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    SalesChannelContext: components["schemas"]["ArrayStruct"] & {
      /** Core context with general configuration values and state */
      context?: {
        currencyFactor?: number;
        currencyId?: string;
        /** Format: int32 */
        currencyPrecision?: number;
        scope?: string;
        source?: string;
        taxState?: string;
        useCache?: boolean;
        versionId?: string;
      };
      /** Currency associated with the current user */
      currency?: {
        /** Format: int32 */
        decimalPrecision?: number;
        factor?: number;
        isoCode?: string;
        isSystemDefault?: boolean;
        name?: string;
        /** Format: int32 */
        position?: number;
        shortName?: string;
        symbol?: string;
      };
      /** Customer group of the current user */
      currentCustomerGroup?: {
        displayGross?: boolean;
        name?: string;
      };
      /** Information about the current customer - `null` if the customer is not logged in */
      customer?: {
        active?: boolean;
        affiliateCode?: string;
        /** Format: int32 */
        autoIncrement?: number;
        /** Format: date-time */
        birthday?: string;
        campaignCode?: string;
        company?: string;
        customerNumber?: string;
        defaultBillingAddressId?: string;
        defaultPaymentMethodId?: string;
        defaultShippingAddressId?: string;
        /** Format: date-time */
        doubleOptInConfirmDate?: string;
        /** Format: date-time */
        doubleOptInEmailSentDate?: string;
        doubleOptInRegistration?: boolean;
        email?: string;
        /** Format: date-time */
        firstLogin?: string;
        firstName?: string;
        groupId?: string;
        guest?: boolean;
        hash?: string;
        languageId?: string;
        /** Format: date-time */
        lastLogin?: string;
        lastName?: string;
        /** Format: date-time */
        lastOrderDate?: string;
        lastPaymentMethodId?: string;
        legacyEncoder?: string;
        legacyPassword?: string;
        newsletter?: boolean;
        /** Format: int32 */
        orderCount?: number;
        password?: string;
        remoteAddress?: string;
        salesChannelId?: string;
        salutationId?: string;
        title?: string;
      };
      /** Fallback group if the default customer group is not applicable */
      fallbackCustomerGroup?: {
        displayGross?: boolean;
        name?: string;
      };
      /** Selected payment method */
      paymentMethod?: {
        active?: boolean;
        availabilityRuleId?: string;
        description?: string;
        formattedHandlerIdentifier?: string;
        handlerIdentifier?: string;
        mediaId?: string;
        name?: string;
        pluginId?: string;
        /** Format: int32 */
        position?: number;
      };
      /** Information about the current sales channel */
      salesChannel?: {
        accessKey?: string;
        active?: boolean;
        analyticsId?: string;
        countryId?: string;
        currencyId?: string;
        customerGroupId?: string;
        footerCategoryId?: string;
        hreflangActive?: boolean;
        hreflangDefaultDomainId?: string;
        languageId?: string;
        mailHeaderFooterId?: string;
        maintenance?: boolean;
        maintenanceIpWhitelist?: string;
        name?: string;
        /** Format: int32 */
        navigationCategoryDepth?: number;
        navigationCategoryId?: string;
        paymentMethodId?: string;
        serviceCategoryId?: string;
        shippingMethodId?: string;
        shortName?: string;
        typeId?: string;
      };
      /** Selected shipping method */
      shippingMethod?: {
        active?: boolean;
        availabilityRuleId?: string;
        deliveryTimeId?: string;
        description?: string;
        mediaId?: string;
        name?: string;
        trackingUrl?: string;
      };
      /** Currently active tax rules and/or rates */
      taxRules?: {
        name?: string;
        /** Format: float */
        taxRate?: number;
      }[];
      /** Context the user session */
      token?: string;
    };
    /** Added since version: 6.0.0.0 */
    SalesChannelDomain: {
      /** Format: date-time */
      createdAt: string;
      currency?: components["schemas"]["Currency"];
      currencyId: string;
      customFields?: Record<string, never>;
      hreflangUseOnlyLocale?: boolean;
      id?: string;
      language?: components["schemas"]["Language"];
      languageId: string;
      salesChannelDefaultHreflang?: components["schemas"]["SalesChannel"];
      salesChannelId: string;
      snippetSetId: string;
      /** Format: date-time */
      updatedAt?: string;
      url: string;
    };
    /** Added since version: 6.0.0.0 */
    SalesChannelType: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Salutation: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      displayName: string;
      id?: string;
      letterName: string;
      salutationKey: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    SalutationJsonApi: components["schemas"]["resource"] & {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      displayName: string;
      id?: string;
      letterName: string;
      salutationKey: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ScheduledTask: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.7.0 */
    Script: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SendcloudApiRequestsCache: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    SeoUrl: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      foreignKey: string;
      id?: string;
      isCanonical?: boolean;
      isDeleted?: boolean;
      isModified?: boolean;
      languageId: string;
      pathInfo: string;
      routeName: string;
      salesChannelId?: string;
      seoPathInfo: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Runtime field, cannot be used as part of the criteria. */
      url?: string;
    };
    /** Added since version: 6.0.0.0 */
    SeoUrlJsonApi: components["schemas"]["resource"] & {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      foreignKey: string;
      id?: string;
      isCanonical?: boolean;
      isDeleted?: boolean;
      isModified?: boolean;
      languageId: string;
      pathInfo: string;
      routeName: string;
      salesChannelId?: string;
      seoPathInfo: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Runtime field, cannot be used as part of the criteria. */
      url?: string;
    };
    /** Added since version: 6.0.0.0 */
    SeoUrlTemplate: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      isValid?: boolean;
      salesChannelId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ShippingMethod: {
      active?: boolean;
      availabilityRule?: components["schemas"]["Rule"];
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      deliveryTime?: components["schemas"]["DeliveryTime"];
      deliveryTimeId: string;
      description?: string;
      id?: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      prices?: components["schemas"]["ShippingMethodPrice"];
      tags?: components["schemas"]["Tag"];
      tax?: components["schemas"]["Tax"];
      taxType: string;
      trackingUrl?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    ShippingMethodJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      deliveryTimeId: string;
      description?: string;
      id?: string;
      mediaId?: string;
      name: string;
      /** Format: int64 */
      position?: number;
      relationships?: {
        availabilityRule?: {
          data?: {
            /** @example dc3be6202494434695b76343b811c8d9 */
            id?: string;
            /** @example rule */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/availabilityRule
             */
            related?: string;
          };
        };
        deliveryTime?: {
          data?: {
            /** @example 9391c768cb97448b8aadede2c4b912ff */
            id?: string;
            /** @example delivery_time */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/deliveryTime
             */
            related?: string;
          };
        };
        media?: {
          data?: {
            /** @example 813bd53a2f7842aeb5e6f2cc66d6d323 */
            id?: string;
            /** @example media */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/media
             */
            related?: string;
          };
        };
        prices?: {
          data?: {
            /** @example 0e6e16eb258e45a7abebab30cb47be3f */
            id?: string;
            /** @example shipping_method_price */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/prices
             */
            related?: string;
          };
        };
        tags?: {
          data?: {
            /** @example b685a4e239254173993ddb7961ca2a65 */
            id?: string;
            /** @example tag */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/tags
             */
            related?: string;
          };
        };
        tax?: {
          data?: {
            /** @example 100e4793a1474517b0fb8768d6bc69f8 */
            id?: string;
            /** @example tax */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /shipping-method/82876b3e43754f1dad9b9645f86985b0/tax
             */
            related?: string;
          };
        };
      };
      taxType: string;
      trackingUrl?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    ShippingMethodPageRouteResponse: {
      active?: boolean;
      availabilityRule?: {
        description?: string;
        invalid?: boolean;
        name?: string;
        /** Format: int32 */
        priority?: number;
      };
      availabilityRuleId?: string;
      deliveryTime?: {
        /** Format: int32 */
        max?: number;
        /** Format: int32 */
        min?: number;
        name?: string;
        unit?: string;
      };
      deliveryTimeId?: string;
      description?: string;
      media?: {
        alt?: string;
        fileExtension?: string;
        fileName?: string;
        /** Format: int32 */
        fileSize?: number;
        mediaFolderId?: string;
        mediaTypeRaw?: string;
        metaDataRaw?: string;
        mimeType?: string;
        private?: boolean;
        thumbnailsRo?: string;
        title?: string;
        /** Format: date-time */
        uploadedAt?: string;
        url?: string;
        userId?: string;
      };
      mediaId?: string;
      name?: string;
      orderDeliveries?: {
        orderId?: string;
        /** Format: date-time */
        shippingDateEarliest?: string;
        /** Format: date-time */
        shippingDateLatest?: string;
        shippingMethodId?: string;
        shippingOrderAddressId?: string;
        stateId?: string;
      }[];
      prices?: {
        /** Format: int32 */
        calculation?: number;
        calculationRuleId?: string;
        currencyId?: string;
        /** Format: float */
        price?: number;
        /** Format: float */
        quantityEnd?: number;
        /** Format: float */
        quantityStart?: number;
        ruleId?: string;
        shippingMethodId?: string;
      }[];
      salesChannelDefaultAssignments?: {
        accessKey?: string;
        active?: boolean;
        countryId?: string;
        currencyId?: string;
        customerGroupId?: string;
        footerCategoryId?: string;
        hreflangActive?: boolean;
        hreflangDefaultDomainId?: string;
        languageId?: string;
        mailHeaderFooterId?: string;
        maintenance?: boolean;
        maintenanceIpWhitelist?: string;
        name?: string;
        /** Format: int32 */
        navigationCategoryDepth?: number;
        navigationCategoryId?: string;
        paymentMethodId?: string;
        serviceCategoryId?: string;
        shippingMethodId?: string;
        shortName?: string;
        typeId?: string;
      }[];
      salesChannels?: {
        accessKey?: string;
        active?: boolean;
        countryId?: string;
        currencyId?: string;
        customerGroupId?: string;
        footerCategoryId?: string;
        hreflangActive?: boolean;
        hreflangDefaultDomainId?: string;
        languageId?: string;
        mailHeaderFooterId?: string;
        maintenance?: boolean;
        maintenanceIpWhitelist?: string;
        name?: string;
        /** Format: int32 */
        navigationCategoryDepth?: number;
        navigationCategoryId?: string;
        paymentMethodId?: string;
        serviceCategoryId?: string;
        shippingMethodId?: string;
        shortName?: string;
        typeId?: string;
      }[];
      tags?: {
        name?: string;
      }[];
      translations?: {
        description?: string;
        name?: string;
        shippingMethodId?: string;
      }[];
    }[];
    /** Added since version: 6.0.0.0 */
    ShippingMethodPrice: {
      /** Format: int64 */
      calculation?: number;
      calculationRuleId?: string;
      /** Format: date-time */
      createdAt: string;
      currencyPrice?: Record<string, never>;
      customFields?: Record<string, never>;
      id?: string;
      /** Format: float */
      quantityEnd?: number;
      /** Format: float */
      quantityStart?: number;
      ruleId?: string;
      shippingMethodId: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Sitemap: components["schemas"]["ArrayStruct"] & {
      /** Format: date-time */
      created?: string;
      filename?: string;
    };
    /** Added since version: 6.0.0.0 */
    Snippet: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      setId: string;
      translationKey: string;
      /** Format: date-time */
      updatedAt?: string;
      value: string;
    };
    /** Added since version: 6.0.0.0 */
    SnippetSet: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      iso: string;
      name: string;
      snippets?: components["schemas"]["Snippet"];
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    StateMachine: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      states?: components["schemas"]["StateMachineState"];
      transitions?: components["schemas"]["StateMachineTransition"];
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    StateMachineHistory: {
      /** Format: date-time */
      createdAt: string;
      fromStateMachineState?: components["schemas"]["StateMachineState"];
      id?: string;
      toStateMachineState?: components["schemas"]["StateMachineState"];
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    StateMachineState: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      technicalName: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    StateMachineTransition: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Struct: {
      /** Alias which can be used to restrict response fields. For more information see [includes](https://shopware.stoplight.io/docs/store-api/docs/concepts/search-queries.md#includes-apialias). */
      apiAlias?: string;
    };
    success: {
      data: components["schemas"]["data"];
      /** To reduce the number of HTTP requests, servers **MAY** allow responses that include related resources along with the requested primary resources. Such responses are called "compound documents". */
      included?: components["schemas"]["resource"][];
      /** Link members related to the primary data. */
      links?: components["schemas"]["links"] &
        components["schemas"]["pagination"];
      meta?: components["schemas"]["meta"];
    };
    SuccessResponse: {
      success?: boolean;
    };
    swag_paypal_v1_capture: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      createTime?: string;
      id?: string;
      isFinalCapture?: boolean;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      parentPayment?: string;
      reasonCode?: string;
      state?: string;
      transactionFee?: components["schemas"]["swag_paypal_v1_common_value"];
      updateTime?: string;
    };
    swag_paypal_v1_client_token: {
      clientToken?: string;
      /** Calculated expiration date */
      expireDateTime?: Record<string, never>;
      /** The lifetime of the access token, in seconds. */
      expiresIn?: number;
    };
    swag_paypal_v1_common_address: {
      city?: string;
      countryCode?: string;
      line1?: string;
      line2?: string | null;
      phone?: string | null;
      postalCode?: string;
      state?: string | null;
    };
    swag_paypal_v1_common_amount: {
      currency?: string;
      details?: components["schemas"]["swag_paypal_v1_common_details"];
      total?: string;
    };
    swag_paypal_v1_common_details: {
      discount?: string;
      handlingFee?: string;
      insurance?: string;
      shipping?: string;
      shippingDiscount?: string;
      subtotal?: string;
      tax?: string;
    };
    swag_paypal_v1_common_link: {
      encType?: string | null;
      href?: string;
      method?: string;
      rel?: string;
    };
    swag_paypal_v1_common_money: {
      currencyCode?: string;
      value?: string;
    };
    swag_paypal_v1_common_value: {
      currency?: string;
      value?: string;
    };
    swag_paypal_v1_create_webhooks: {
      eventTypes?: components["schemas"]["swag_paypal_v1_create_webhooks_event_type"][];
      url?: string;
    };
    swag_paypal_v1_create_webhooks_event_type: {
      name?: string;
    };
    swag_paypal_v1_disputes: {
      items?: components["schemas"]["swag_paypal_v1_disputes_item"][] | null;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
    };
    swag_paypal_v1_disputes_adjudication: {
      adjudicationTime?: string;
      disputeLifeCycleStage?: string;
      reason?: string;
      type?: string;
    };
    swag_paypal_v1_disputes_common_buyer: {
      name?: string;
    };
    swag_paypal_v1_disputes_common_item: {
      disputeAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      itemDescription?: string;
      itemId?: string;
      itemQuantity?: string;
      notes?: string;
      partnerTransactionId?: string;
      reason?: string;
    };
    swag_paypal_v1_disputes_common_product_details: {
      productReceived?: string;
      productReceivedTime?: string;
      purchaseUrl?: string;
      returnDetails?: components["schemas"]["swag_paypal_v1_disputes_common_return_details"];
      subReasons?: components["schemas"]["swag_paypal_v1_disputes_common_sub_reason"][];
    };
    swag_paypal_v1_disputes_common_return_details: {
      mode?: string;
      receipt?: boolean;
      returnConfirmationNumber?: string;
      returned?: boolean;
      returnTime?: string;
    };
    swag_paypal_v1_disputes_common_seller: {
      email?: string;
      merchantId?: string;
      name?: string;
    };
    swag_paypal_v1_disputes_common_service_details: {
      description?: string;
      note?: string;
      purchaseUrl?: string;
      serviceStarted?: string;
      subReasons?: components["schemas"]["swag_paypal_v1_disputes_common_sub_reason"][];
    };
    swag_paypal_v1_disputes_common_sub_reason: {
      subReason?: string;
    };
    swag_paypal_v1_disputes_common_transaction: {
      buyer?: components["schemas"]["swag_paypal_v1_disputes_common_buyer"];
      buyerTransactionId?: string;
      createTime?: string;
      custom?: string;
      grossAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      invoiceNumber?: string;
      items?: components["schemas"]["swag_paypal_v1_disputes_common_item"][];
      referenceId?: string;
      seller?: components["schemas"]["swag_paypal_v1_disputes_common_seller"];
      sellerTransactionId?: string;
      transactionStatus?: string;
    };
    swag_paypal_v1_disputes_communication_details: {
      email?: string;
      note?: string;
      timePosted?: string;
    };
    swag_paypal_v1_disputes_dispute_outcome: {
      amountRefunded?: components["schemas"]["swag_paypal_v1_common_money"];
      outcomeCode?: string;
    };
    swag_paypal_v1_disputes_disputed_transaction: {
      sellerProtectionEligible?: boolean;
    } & components["schemas"]["swag_paypal_v1_disputes_common_transaction"];
    swag_paypal_v1_disputes_evidence: {
      documents?: components["schemas"]["swag_paypal_v1_disputes_evidence_document"][];
      evidenceInfo?: components["schemas"]["swag_paypal_v1_disputes_evidence_info"];
      evidenceType?: string;
      itemId?: string;
      notes?: string;
    };
    swag_paypal_v1_disputes_evidence_document: {
      name?: string;
    };
    swag_paypal_v1_disputes_evidence_info: {
      refundIds?: components["schemas"]["swag_paypal_v1_disputes_evidence_refund_id"][];
      trackingInfo?: components["schemas"]["swag_paypal_v1_disputes_evidence_tracking_info"][];
    };
    swag_paypal_v1_disputes_evidence_refund_id: {
      refundId?: string;
    };
    swag_paypal_v1_disputes_evidence_tracking_info: {
      carrierName?: string;
      carrierNameOther?: string;
      trackingNumber?: string;
      trackingUrl?: string;
    };
    swag_paypal_v1_disputes_extensions: {
      billingDisputeProperties?: components["schemas"]["swag_paypal_v1_disputes_extensions_billing_dispute_properties"];
      buyerContactedChannel?: string;
      buyerContactedTime?: string;
      merchandizeDisputeProperties?: components["schemas"]["swag_paypal_v1_disputes_extensions_merchandize_dispute_properties"];
      merchantContacted?: boolean;
      merchantContactedMode?: string;
      merchantContactedOutcome?: string;
      merchantContactedTime?: string;
    };
    swag_paypal_v1_disputes_extensions_aggred_refund_details: {
      merchantAgreedRefund?: boolean;
      merchantAgreedRefundTime?: string;
    };
    swag_paypal_v1_disputes_extensions_billing_dispute_properties: {
      canceledRecurringBilling?: components["schemas"]["swag_paypal_v1_disputes_extensions_canceled_recurring_billing"];
      creditNotProcessed?: components["schemas"]["swag_paypal_v1_disputes_extensions_cretid_not_processed"];
      duplicateTransaction?: components["schemas"]["swag_paypal_v1_disputes_extensions_duplicate_transaction"];
      incorrectTransactionAmount?: components["schemas"]["swag_paypal_v1_disputes_extensions_incorrect_transaction_amount"];
      paymentByOtherMeans?: components["schemas"]["swag_paypal_v1_disputes_extensions_payment_by_other_means"];
    };
    swag_paypal_v1_disputes_extensions_canceled_recurring_billing: {
      cancellationDetails?: components["schemas"]["swag_paypal_v1_disputes_extensions_cancellation_details"];
      expectedRefund?: components["schemas"]["swag_paypal_v1_common_money"];
    };
    swag_paypal_v1_disputes_extensions_cancellation_details: {
      cancellationDate?: string;
      cancellationMode?: string;
      cancellationNumber?: string;
      cancelled?: boolean;
    };
    swag_paypal_v1_disputes_extensions_cretid_not_processed: {
      agreedRefundDetails?: components["schemas"]["swag_paypal_v1_disputes_extensions_aggred_refund_details"];
      cancellationDetails?: components["schemas"]["swag_paypal_v1_disputes_extensions_cancellation_details"];
      expectedRefund?: components["schemas"]["swag_paypal_v1_common_money"];
      issueType?: string;
      productDetails?: components["schemas"]["swag_paypal_v1_disputes_common_product_details"];
      serviceDetails?: components["schemas"]["swag_paypal_v1_disputes_common_service_details"];
    };
    swag_paypal_v1_disputes_extensions_duplicate_transaction: {
      originalTransaction?: components["schemas"]["swag_paypal_v1_disputes_common_transaction"];
      receivedDuplicate?: boolean;
    };
    swag_paypal_v1_disputes_extensions_incorrect_transaction_amount: {
      correctTransactionAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      correctTransactionTime?: string;
    };
    swag_paypal_v1_disputes_extensions_merchandize_dispute_properties: {
      issueType?: string;
      productDetails?: components["schemas"]["swag_paypal_v1_disputes_common_product_details"];
      serviceDetails?: components["schemas"]["swag_paypal_v1_disputes_common_service_details"];
    };
    swag_paypal_v1_disputes_extensions_payment_by_other_means: {
      chargeDifferentFromOriginal?: boolean;
      paymentInstrumentSuffix?: string;
      paymentMethod?: string;
      receivedDuplicate?: boolean;
    };
    swag_paypal_v1_disputes_item: {
      adjudications?: components["schemas"]["swag_paypal_v1_disputes_adjudication"][];
      buyerResponseDueDate?: string | null;
      communicationDetails?: components["schemas"]["swag_paypal_v1_disputes_communication_details"];
      createTime?: string;
      disputeAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      disputeChannel?: string | null;
      disputedTransactions?:
        | components["schemas"]["swag_paypal_v1_disputes_disputed_transaction"][]
        | null;
      disputeId?: string;
      disputeLifeCycleStage?: string;
      disputeOutcome?: components["schemas"]["swag_paypal_v1_disputes_dispute_outcome"];
      disputeState?: string | null;
      evidences?:
        | components["schemas"]["swag_paypal_v1_disputes_evidence"][]
        | null;
      extensions?: components["schemas"]["swag_paypal_v1_disputes_extensions"];
      externalReasonCode?: string | null;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      messages?:
        | components["schemas"]["swag_paypal_v1_disputes_message"][]
        | null;
      moneyMovements?: components["schemas"]["swag_paypal_v1_disputes_money_movement"][];
      offer?: components["schemas"]["swag_paypal_v1_disputes_offer"];
      partnerActions?:
        | components["schemas"]["swag_paypal_v1_disputes_partner_action"][]
        | null;
      reason?: string;
      refundDetails?: components["schemas"]["swag_paypal_v1_disputes_refund_details"];
      sellerResponseDueDate?: string | null;
      status?: string;
      supportingInfo?:
        | components["schemas"]["swag_paypal_v1_disputes_supporting_info"][]
        | null;
      updateTime?: string;
    };
    swag_paypal_v1_disputes_message: {
      content?: string;
      postedBy?: string;
      timePosted?: string;
    };
    swag_paypal_v1_disputes_money_movement: {
      affectedParty?: string;
      amount?: components["schemas"]["swag_paypal_v1_common_money"];
      initiatedTime?: string;
      reason?: string;
      type?: string;
    };
    swag_paypal_v1_disputes_offer: {
      buyerRequestedAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      history?:
        | components["schemas"]["swag_paypal_v1_disputes_offer_history"][]
        | null;
      offerType?: string;
      sellerOfferedAmount?: components["schemas"]["swag_paypal_v1_common_money"];
    };
    swag_paypal_v1_disputes_offer_history: {
      actor?: string;
      eventType?: string;
      offerTime?: string;
      offerType?: string;
    };
    swag_paypal_v1_disputes_partner_action: {
      amount?: components["schemas"]["swag_paypal_v1_common_money"];
      createTime?: string;
      dueTime?: string;
      id?: string;
      name?: string;
      status?: string;
      updateTime?: string;
    };
    swag_paypal_v1_disputes_refund_details: {
      allowedRefundAmount?: components["schemas"]["swag_paypal_v1_common_money"];
    };
    swag_paypal_v1_disputes_supporting_info: {
      notes?: string;
      providedTime?: string;
      source?: string;
    };
    swag_paypal_v1_do_void: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      createTime?: string;
      id?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      parentPayment?: string;
      state?: string;
      updateTime?: string;
    };
    swag_paypal_v1_merchant_integrations: {
      capabilities?: components["schemas"]["swag_paypal_v1_merchant_integrations_capability"][];
      grantedPermissions?: string[];
      legalName?: string;
      merchantId?: string;
      oauthIntegrations?: components["schemas"]["swag_paypal_v1_merchant_integrations_oauth_integration"][];
      paymentsReceivable?: boolean;
      primaryEmail?: string;
      primaryEmailConfirmed?: boolean;
      products?: components["schemas"]["swag_paypal_v1_merchant_integrations_product"][];
      trackingId?: string;
    };
    swag_paypal_v1_merchant_integrations_capability: {
      name?: string;
      status?: string;
    };
    swag_paypal_v1_merchant_integrations_oauth_integration: {
      integrationMethod?: string;
      integrationType?: string;
      oauthThirdParty?: components["schemas"]["swag_paypal_v1_merchant_integrations_oauth_integration_third_party"][];
      status?: string;
    };
    swag_paypal_v1_merchant_integrations_oauth_integration_third_party: {
      accessToken?: string;
      merchantClientId?: string;
      partnerClientId?: string;
      refreshToken?: string;
      scopes?: string[];
    };
    swag_paypal_v1_merchant_integrations_product: {
      capabilities?: components["schemas"]["swag_paypal_v1_merchant_integrations_capability"][];
      name?: string;
      vettingStatus?: string;
    };
    swag_paypal_v1_merchant_status: {
      paymentsReceivable?: boolean;
      primaryEmail?: string;
      primaryEmailConfirmed?: boolean;
    };
    swag_paypal_v1_oauth_credentials: {
      restId?: string;
      restSecret?: string;
      url?: string;
    };
    swag_paypal_v1_patch: {
      op?: string;
      path?: string;
      value?: string | unknown[];
    };
    swag_paypal_v1_payment: {
      applicationContext?: components["schemas"]["swag_paypal_v1_payment_application_context"];
      cart?: string;
      createTime?: string;
      id?: string;
      /** @default sale */
      intent?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      payer?: components["schemas"]["swag_paypal_v1_payment_payer"];
      paymentInstruction?: components["schemas"]["swag_paypal_v1_payment_payment_instruction"];
      redirectUrls?: components["schemas"]["swag_paypal_v1_payment_redirect_urls"];
      state?: string;
      transactions?: components["schemas"]["swag_paypal_v1_payment_transaction"][];
      updateTime?: string;
    };
    swag_paypal_v1_payment_application_context: {
      brandName?: string;
      landingPage?: string;
      locale?: string;
      /** @default SET_PROVIDED_ADDRESS */
      shippingPreference?: string;
      /** @default commit */
      userAction?: string;
    };
    swag_paypal_v1_payment_execute_payer_info: {
      payerId?: string;
    };
    swag_paypal_v1_payment_payer: {
      externalSelectedFundingInstrumentType?: string;
      payerInfo?: components["schemas"]["swag_paypal_v1_payment_payer_info"];
      paymentMethod?: string;
      status?: string;
    };
    swag_paypal_v1_payment_payer_info: {
      billingAddress?: components["schemas"]["swag_paypal_v1_common_address"];
      countryCode?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      phone?: string;
      shippingAddress?: components["schemas"]["swag_paypal_v1_payment_payer_info_shipping_address"];
    } & components["schemas"]["swag_paypal_v1_payment_execute_payer_info"];
    swag_paypal_v1_payment_payer_info_shipping_address: {
      recipientName?: string;
    } & components["schemas"]["swag_paypal_v1_common_address"];
    swag_paypal_v1_payment_payment_instruction: {
      amount?: components["schemas"]["swag_paypal_v1_common_value"];
      instructionType?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      paymentDueDate?: string;
      recipientBankingInstruction?: components["schemas"]["swag_paypal_v1_payment_recipient_banking_instruction"];
      referenceNumber?: string;
    };
    swag_paypal_v1_payment_recipient_banking_instruction: {
      accountHolderName?: string;
      bankIdentifierCode?: string;
      bankName?: string;
      internationalBankAccountNumber?: string;
    };
    swag_paypal_v1_payment_redirect_urls: {
      cancelUrl?: string;
      returnUrl?: string;
    };
    swag_paypal_v1_payment_transaction: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      custom?: string;
      description?: string;
      invoiceNumber?: string | null;
      itemList?: components["schemas"]["swag_paypal_v1_payment_transaction_item_list"];
      payee?: components["schemas"]["swag_paypal_v1_payment_transaction_payee"];
      relatedResources?: components["schemas"]["swag_paypal_v1_payment_transaction_related_resource"][];
      softDescriptor?: string;
    };
    swag_paypal_v1_payment_transaction_abstract_related_resource: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      createTime?: string;
      id?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      parentPayment?: string;
      paymentMode?: string;
      protectionEligibility?: string;
      protectionEligibilityType?: string;
      receiptId?: string;
      state?: string;
      updateTime?: string;
    };
    swag_paypal_v1_payment_transaction_authorization: {
      reasonCode?: string;
      validUntil?: string;
    } & components["schemas"]["swag_paypal_v1_payment_transaction_abstract_related_resource"];
    swag_paypal_v1_payment_transaction_capture: {
      custom?: string;
      invoiceNumber?: string;
      transactionFee?: components["schemas"]["swag_paypal_v1_common_value"];
    } & components["schemas"]["swag_paypal_v1_payment_transaction_abstract_related_resource"];
    swag_paypal_v1_payment_transaction_item: {
      currency?: string;
      name?: string;
      price?: string;
      quantity?: number;
      sku?: string | null;
      tax?: string;
    };
    swag_paypal_v1_payment_transaction_item_list: {
      items?: components["schemas"]["swag_paypal_v1_payment_transaction_item"][];
      shippingAddress?: components["schemas"]["swag_paypal_v1_payment_transaction_shipping_address"];
      shippingOptions?: components["schemas"]["swag_paypal_v1_payment_transaction_shipping_option"][];
      shippingPhoneNumber?: string;
    };
    swag_paypal_v1_payment_transaction_order: {
      reasonCode?: string;
    } & components["schemas"]["swag_paypal_v1_payment_transaction_abstract_related_resource"];
    swag_paypal_v1_payment_transaction_payee: {
      email?: string;
      merchantId?: string;
    };
    swag_paypal_v1_payment_transaction_refund: {
      captureId?: string;
      saleId?: string;
    } & components["schemas"]["swag_paypal_v1_payment_transaction_abstract_related_resource"];
    swag_paypal_v1_payment_transaction_related_resource: {
      authorization?: components["schemas"]["swag_paypal_v1_payment_transaction_authorization"];
      capture?: components["schemas"]["swag_paypal_v1_payment_transaction_capture"];
      order?: components["schemas"]["swag_paypal_v1_payment_transaction_order"];
      refund?: components["schemas"]["swag_paypal_v1_payment_transaction_refund"];
      sale?: components["schemas"]["swag_paypal_v1_payment_transaction_sale"];
    };
    swag_paypal_v1_payment_transaction_sale: {
      transactionFee?: components["schemas"]["swag_paypal_v1_common_value"];
    } & components["schemas"]["swag_paypal_v1_payment_transaction_abstract_related_resource"];
    swag_paypal_v1_payment_transaction_shipping_address: {
      recipientName?: string;
    } & components["schemas"]["swag_paypal_v1_common_address"];
    swag_paypal_v1_payment_transaction_shipping_option: [];
    swag_paypal_v1_plan: {
      billingCycles?: components["schemas"]["swag_paypal_v1_plan_billing_cycle"][];
      description?: string | null;
      name?: string;
      paymentPreferences?: components["schemas"]["swag_paypal_v1_plan_payment_preferences"];
      productId?: string;
      status?: string;
      taxes?: components["schemas"]["swag_paypal_v1_plan_taxes"];
    };
    swag_paypal_v1_plan_billing_cycle: {
      frequency?: components["schemas"]["swag_paypal_v1_plan_frequency"];
      pricingScheme?: components["schemas"]["swag_paypal_v1_plan_pricing_scheme"];
      sequence?: number;
      tenureType?: string;
      totalCycles?: number;
    };
    swag_paypal_v1_plan_frequency: {
      intervalCount?: number;
      intervalUnit?: string;
    };
    swag_paypal_v1_plan_payment_preferences: {
      autoBillOutstanding?: boolean;
      paymentFailureThreshold?: number;
    };
    swag_paypal_v1_plan_pricing_scheme: {
      fixedPrice?: components["schemas"]["swag_paypal_v1_common_money"];
    };
    swag_paypal_v1_plan_taxes: {
      inclusive?: boolean;
      percentage?: string;
    };
    swag_paypal_v1_product: {
      description?: string;
      name?: string;
      type?: string;
    };
    swag_paypal_v1_refund: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      captureId?: string;
      createTime?: string;
      description?: string;
      id?: string;
      invoiceNumber?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      parentPayment?: string;
      reason?: string;
      refundFromReceivedAmount?: components["schemas"]["swag_paypal_v1_common_value"];
      refundFromTransactionFee?: components["schemas"]["swag_paypal_v1_common_value"];
      saleId?: string;
      state?: string;
      totalRefundedAmount?: components["schemas"]["swag_paypal_v1_common_value"];
      updateTime?: string;
    };
    swag_paypal_v1_shipping_batch: {
      trackers?: components["schemas"]["swag_paypal_v1_common_link"][];
    };
    swag_paypal_v1_shipping_tracker: {
      carrier?: string;
      notifyBuyer?: boolean;
      /** Pattern: '2022-08-15' */
      shipmentDate?: string;
      status?: string;
      trackingNumber?: string;
      transactionId?: string;
    };
    swag_paypal_v1_subscription: {
      applicationContext?: components["schemas"]["swag_paypal_v1_subscription_application_context"];
      billingInfo?: components["schemas"]["swag_paypal_v1_subscription_billing_info"];
      createTime?: string;
      id?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      planId?: string;
      quantity?: string;
      shippingAmount?: components["schemas"]["swag_paypal_v1_common_money"];
      startTime?: string;
      status?: string;
      statusUpdateTime?: string;
      subscriber?: components["schemas"]["swag_paypal_v1_subscription_subscriber"];
      updateTime?: string;
    };
    swag_paypal_v1_subscription_application_context: {
      brandName?: string;
      cancelUrl?: string;
      locale?: string;
      returnUrl?: string;
      /** @default SET_PROVIDED_ADDRESS */
      shippingPreference?: string;
      /** @default SUBSCRIBE_NOW */
      userAction?: string;
    };
    swag_paypal_v1_subscription_billing_info: {
      cycleExecutions?: components["schemas"]["swag_paypal_v1_subscription_cycle_execution"][];
      failedPaymentsCount?: number;
      lastPayment?: components["schemas"]["swag_paypal_v1_subscription_last_payment"];
      nextBillingTime?: string | null;
      outstandingBalance?: components["schemas"]["swag_paypal_v1_common_money"];
    };
    swag_paypal_v1_subscription_cycle_execution: {
      cyclesCompleted?: number;
      cyclesRemaining?: number;
      sequence?: number;
      tenureType?: string;
      totalCycles?: number;
    };
    swag_paypal_v1_subscription_last_payment: {
      amount?: components["schemas"]["swag_paypal_v1_common_money"];
      time?: string;
    };
    swag_paypal_v1_subscription_name: {
      givenName?: string;
      surname?: string;
    };
    swag_paypal_v1_subscription_shipping_address: {
      address?: components["schemas"]["swag_paypal_v1_subscription_shipping_address_address"];
      name?: components["schemas"]["swag_paypal_v1_subscription_shipping_address_name"];
    };
    swag_paypal_v1_subscription_shipping_address_address: {
      addressLine_1?: string | null;
      addressLine_2?: string | null;
      adminArea_1?: string | null;
      adminArea_2?: string | null;
      countryCode?: string;
      postalCode?: string | null;
    };
    swag_paypal_v1_subscription_shipping_address_name: {
      fullName?: string;
    };
    swag_paypal_v1_subscription_subscriber: {
      emailAddress?: string;
      name?: components["schemas"]["swag_paypal_v1_subscription_name"];
      payerId?: string;
      shippingAddress?: components["schemas"]["swag_paypal_v1_subscription_shipping_address"];
    };
    swag_paypal_v1_token: {
      /**
       * The access token issued by PayPal. After the access token
       * expires (see $expiresIn), you must request a new access token.
       */
      accessToken?: string;
      appId?: string;
      /** Calculated expiration date */
      expireDateTime?: Record<string, never>;
      /** The lifetime of the access token, in seconds. */
      expiresIn?: number;
      nonce?: string;
      /**
       * Scopes expressed in the form of resource URL endpoints. The value of the scope parameter
       * is expressed as a list of space-delimited, case-sensitive strings.
       */
      scope?: string;
      /**
       * The type of the token issued as described in OAuth2.0 RFC6749,
       * Section 7.1. Value is case insensitive.
       */
      tokenType?: string;
    };
    swag_paypal_v1_webhook: {
      createTime?: string;
      eventType?: string;
      eventVersion?: string;
      id?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      resource?: components["schemas"]["swag_paypal_v1_webhook_resource"];
      resourceType?: string;
      summary?: string;
    };
    swag_paypal_v1_webhook_resource: {
      amount?: components["schemas"]["swag_paypal_v1_common_amount"];
      billingAgreementId?: string | null;
      clearingTime?: string;
      createTime?: string;
      id?: string;
      invoiceNumber?: string;
      links?: components["schemas"]["swag_paypal_v1_common_link"][];
      merchantId?: string | null;
      parentPayment?: string | null;
      paymentMode?: string;
      protectionEligibility?: string;
      protectionEligibilityType?: string;
      refundReasonCode?: string | null;
      saleId?: string | null;
      state?: string;
      transactionFee?: components["schemas"]["swag_paypal_v1_common_value"];
      updateTime?: string;
    };
    swag_paypal_v2_common_address: {
      /**
       * The first line of the address. For example, number or street. For example, 173 Drury Lane.
       * Required for data entry and compliance and risk checks. Must contain the full address.
       */
      addressLine_1?: string | null;
      /** The second line of the address. For example, suite or apartment number. */
      addressLine_2?: string | null;
      /**
       * The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision.
       * Format for postal delivery. For example, CA and not California.
       */
      adminArea_1?: string | null;
      /** A city, town, or village. Smaller than $adminArea1 */
      adminArea_2?: string | null;
      countryCode?: string;
      postalCode?: string | null;
    };
    swag_paypal_v2_common_link: {
      encType?: string | null;
      href?: string;
      method?: string;
      rel?: string;
    };
    swag_paypal_v2_common_money: {
      currencyCode?: string;
      value?: string;
    };
    swag_paypal_v2_common_name: {
      givenName?: string;
      surname?: string;
    };
    swag_paypal_v2_common_phone_number: {
      countryCode?: string;
      nationalNumber?: string;
    };
    swag_paypal_v2_order: {
      applicationContext?: components["schemas"]["swag_paypal_v2_order_application_context"];
      createTime?: string;
      id?: string;
      intent?: string;
      links?: components["schemas"]["swag_paypal_v2_common_link"][];
      payer?: components["schemas"]["swag_paypal_v2_order_payer"];
      paymentSource?: components["schemas"]["swag_paypal_v2_order_payment_source"];
      processingInstruction?: string;
      purchaseUnits?: components["schemas"]["swag_paypal_v2_order_purchase_unit"][];
      status?: string;
      updateTime?: string;
    };
    swag_paypal_v2_order_amount: {
      breakdown?: components["schemas"]["swag_paypal_v2_order_breakdown"];
    } & components["schemas"]["swag_paypal_v2_common_money"];
    swag_paypal_v2_order_application_context: {
      brandName?: string;
      cancelUrl?: string;
      /** @default NO_PREFERENCE */
      landingPage?: string;
      returnUrl?: string;
      /** @default SET_PROVIDED_ADDRESS */
      shippingPreference?: string;
      /** @default PAY_NOW */
      userAction?: string;
    };
    swag_paypal_v2_order_authorization: {
      expirationTime?: string;
      sellerProtection?: components["schemas"]["swag_paypal_v2_order_authorization_seller_protection"];
    } & components["schemas"]["swag_paypal_v2_order_payment"];
    swag_paypal_v2_order_authorization_seller_protection: {
      disputeCategories?: string[];
      status?: string;
    };
    swag_paypal_v2_order_breakdown: {
      discount?: components["schemas"]["swag_paypal_v2_common_money"];
      handling?: components["schemas"]["swag_paypal_v2_common_money"];
      insurance?: components["schemas"]["swag_paypal_v2_common_money"];
      itemTotal?: components["schemas"]["swag_paypal_v2_common_money"];
      shipping?: components["schemas"]["swag_paypal_v2_common_money"];
      shippingDiscount?: components["schemas"]["swag_paypal_v2_common_money"];
      taxTotal?: components["schemas"]["swag_paypal_v2_common_money"];
    };
    swag_paypal_v2_order_capture: {
      disbursementMode?: string;
      finalCapture?: boolean;
      invoiceId?: string | null;
      noteToPayer?: string | null;
      sellerProtection?: components["schemas"]["swag_paypal_v2_order_capture_seller_protection"];
      sellerReceivableBreakdown?: components["schemas"]["swag_paypal_v2_order_capture_seller_receivable_breakdown"];
    } & components["schemas"]["swag_paypal_v2_order_payment"];
    swag_paypal_v2_order_capture_seller_protection: {
      disputeCategories?: string[];
      status?: string;
    };
    swag_paypal_v2_order_capture_seller_receivable_breakdown: {
      grossAmount?: components["schemas"]["swag_paypal_v2_common_money"];
      netAmount?: components["schemas"]["swag_paypal_v2_common_money"];
      paypalFee?: components["schemas"]["swag_paypal_v2_common_money"];
    };
    swag_paypal_v2_order_display_data: {
      brandName?: string;
    };
    swag_paypal_v2_order_item: {
      category?: string;
      name?: string;
      quantity?: number;
      sku?: string | null;
      tax?: components["schemas"]["swag_paypal_v2_common_money"];
      taxRate?: number | Record<string, never> | string;
      unitAmount?: components["schemas"]["swag_paypal_v2_common_money"];
    };
    swag_paypal_v2_order_pay_upon_invoice: {
      billingAddress?: components["schemas"]["swag_paypal_v2_common_address"];
      birthDate?: string;
      depositBankDetails?: components["schemas"]["swag_paypal_v2_order_pay_upon_invoice_deposit_bank_details"];
      email?: string;
      experienceContext?: components["schemas"]["swag_paypal_v2_order_pay_upon_invoice_experience_context"];
      name?: components["schemas"]["swag_paypal_v2_common_name"];
      paymentReference?: string;
      phone?: components["schemas"]["swag_paypal_v2_common_phone_number"];
    };
    swag_paypal_v2_order_pay_upon_invoice_deposit_bank_details: {
      accountHolderName?: string;
      bankName?: string;
      bic?: string;
      iban?: string;
    };
    swag_paypal_v2_order_pay_upon_invoice_experience_context: {
      brandName?: string;
      customerServiceInstructions?: string[];
      locale?: string;
      logoUrl?: string;
    };
    swag_paypal_v2_order_payee: {
      displayData?: components["schemas"]["swag_paypal_v2_order_display_data"];
      emailAddress?: string;
      merchantId?: string;
    };
    swag_paypal_v2_order_payer: {
      address?: components["schemas"]["swag_paypal_v2_common_address"];
      emailAddress?: string;
      name?: string;
      payerId?: string;
      phone?: components["schemas"]["swag_paypal_v2_order_phone"];
    };
    swag_paypal_v2_order_payment: {
      amount?: components["schemas"]["swag_paypal_v2_common_money"];
      createTime?: string;
      customId?: string | null;
      id?: string;
      links?: components["schemas"]["swag_paypal_v2_common_link"][];
      status?: string;
      updateTime?: string;
    };
    swag_paypal_v2_order_payment_source: {
      bancontact?: components["schemas"]["swag_paypal_v2_order_payment_source_bancontact"];
      blik?: components["schemas"]["swag_paypal_v2_order_payment_source_blik"];
      boletobancario?: components["schemas"]["swag_paypal_v2_order_payment_source_boletobancario"];
      card?: components["schemas"]["swag_paypal_v2_order_payment_source_card"];
      eps?: components["schemas"]["swag_paypal_v2_order_payment_source_eps"];
      giropay?: components["schemas"]["swag_paypal_v2_order_payment_source_giropay"];
      ideal?: components["schemas"]["swag_paypal_v2_order_payment_source_ideal"];
      multibanco?: components["schemas"]["swag_paypal_v2_order_payment_source_multibanco"];
      myBank?: components["schemas"]["swag_paypal_v2_order_payment_source_mybank"];
      oxxo?: components["schemas"]["swag_paypal_v2_order_payment_source_oxxo"];
      p24?: components["schemas"]["swag_paypal_v2_order_payment_source_p24"];
      payUponInvoice?: components["schemas"]["swag_paypal_v2_order_pay_upon_invoice"];
      sofort?: components["schemas"]["swag_paypal_v2_order_payment_source_sofort"];
      trustly?: components["schemas"]["swag_paypal_v2_order_payment_source_trustly"];
    };
    swag_paypal_v2_order_payment_source_bancontact: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_blik: {
      email?: string;
    } & components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_boletobancario: {
      billingAddress?: components["schemas"]["swag_paypal_v2_common_address"];
      email?: string;
      expiryDate?: string;
      taxInfo?: components["schemas"]["swag_paypal_v2_order_payment_source_boletobancario_taxinfo"];
    } & components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_boletobancario_taxinfo: {
      taxId?: string;
      taxIdType?: string;
    };
    swag_paypal_v2_order_payment_source_card: {
      authenticationResult?: Record<string, unknown> | null;
      brand?: string;
      lastDigits?: string;
      type?: string;
    };
    swag_paypal_v2_order_payment_source_card_authentication_result: {
      liabilityShift?: string;
      threeDSecure?: string | null;
    };
    swag_paypal_v2_order_payment_source_card_authentication_result_3d_secure: {
      authenticationStatus?: string;
      enrollmentStatus?: string;
    };
    swag_paypal_v2_order_payment_source_common: {
      countryCode?: string;
      name?: string;
    };
    swag_paypal_v2_order_payment_source_eps: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_giropay: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_ideal: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_multibanco: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_mybank: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_oxxo: {
      email?: string;
    } & components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_p24: {
      email?: string;
    } & components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_sofort: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payment_source_trustly: components["schemas"]["swag_paypal_v2_order_payment_source_common"];
    swag_paypal_v2_order_payments: {
      authorizations?:
        | components["schemas"]["swag_paypal_v2_order_authorization"][]
        | null;
      captures?: components["schemas"]["swag_paypal_v2_order_capture"][] | null;
      refunds?: components["schemas"]["swag_paypal_v2_order_refund"][] | null;
    };
    swag_paypal_v2_order_phone: {
      phoneNumber?: string;
      phoneType?: string;
    };
    swag_paypal_v2_order_purchase_unit: {
      amount?: components["schemas"]["swag_paypal_v2_order_amount"];
      customId?: string | null;
      description?: string;
      invoiceId?: string | null;
      items?: components["schemas"]["swag_paypal_v2_order_item"][] | null;
      payee?: components["schemas"]["swag_paypal_v2_order_payee"];
      payments?: components["schemas"]["swag_paypal_v2_order_payments"];
      referenceId?: string;
      shipping?: components["schemas"]["swag_paypal_v2_order_shipping"];
    };
    swag_paypal_v2_order_refund: {
      invoiceId?: string | null;
      noteToPayer?: string | null;
      sellerPayableBreakdown?: components["schemas"]["swag_paypal_v2_order_refund_seller_paypable_breakdown"];
    } & components["schemas"]["swag_paypal_v2_order_payment"];
    swag_paypal_v2_order_refund_seller_paypable_breakdown: {
      grossAmount?: components["schemas"]["swag_paypal_v2_common_money"];
      netAmount?: components["schemas"]["swag_paypal_v2_common_money"];
      paypalFee?: components["schemas"]["swag_paypal_v2_common_money"];
      totalRefundedAmount?: components["schemas"]["swag_paypal_v2_common_money"];
    };
    swag_paypal_v2_order_shipping: {
      address?: components["schemas"]["swag_paypal_v2_common_address"];
      name?: components["schemas"]["swag_paypal_v2_order_shipping_name"];
    };
    swag_paypal_v2_order_shipping_name: {
      fullName?: string;
    };
    swag_paypal_v2_patch: {
      from?: string;
      op?: string;
      path?: string;
      value?: number | Record<string, never> | string | boolean | unknown[];
    };
    swag_paypal_v2_referral: {
      businessEntity?: components["schemas"]["swag_paypal_v2_referral_business_entity"];
      capabilities?: string[];
      legalConsents?: components["schemas"]["swag_paypal_v2_referral_legal_consent"][];
      links?: components["schemas"]["swag_paypal_v2_common_link"][];
      operations?: components["schemas"]["swag_paypal_v2_referral_operation"][];
      partnerConfigOverride?: components["schemas"]["swag_paypal_v2_referral_partner_config_override"];
      preferredLanguageCode?: string;
      products?: string[];
      trackingId?: string;
    };
    swag_paypal_v2_referral_address: {
      countryCode?: string;
      /** @default WORK */
      type?: string;
    };
    swag_paypal_v2_referral_api_integration_preference: {
      restApiIntegration?: components["schemas"]["swag_paypal_v2_referral_rest_api_integration"];
    };
    swag_paypal_v2_referral_business_entity: {
      addresses?: components["schemas"]["swag_paypal_v2_referral_address"][];
    };
    swag_paypal_v2_referral_legal_consent: {
      granted?: boolean;
      /** @default SHARE_DATA_CONSENT */
      type?: string;
    };
    swag_paypal_v2_referral_operation: {
      apiIntegrationPreference?: string;
      /** @default API_INTEGRATION */
      operation?: string;
    };
    swag_paypal_v2_referral_partner_config_override: {
      returnUrl?: string;
    };
    swag_paypal_v2_referral_rest_api_integration: {
      /** @default PAYPAL */
      integrationMethod?: string;
      /** @default THIRD_PARTY */
      integrationType?: string;
      thirdPartyDetails?: string;
    };
    swag_paypal_v2_referral_third_party_details: {
      features?: string[];
    };
    swag_paypal_v2_webhook: {
      createTime?: string;
      eventType?: string;
      eventVersion?: string;
      id?: string;
      links?: components["schemas"]["swag_paypal_v2_common_link"][];
      resource?: string;
      resourceType?: string;
      resourceVersion?: string;
      summary?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsBlockRule: {
      cmsBlock?: components["schemas"]["CmsBlock"];
      cmsBlockId: string;
      cmsBlockVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      inverted?: boolean;
      /** Format: date-time */
      updatedAt?: string;
      visibilityRule?: components["schemas"]["Rule"];
      visibilityRuleId?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsForm: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsFormGroup: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsFormGroupField: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsQuickview: {
      active?: boolean;
      cmsBlock?: components["schemas"]["CmsBlock"];
      cmsBlockId?: string;
      cmsBlockVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsScrollNavigation: {
      active?: boolean;
      cmsSection?: components["schemas"]["CmsSection"];
      cmsSectionId?: string;
      cmsSectionVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      displayName?: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCmsExtensionsScrollNavigationPageSettings: {
      active: boolean;
      bouncy: boolean;
      cmsPage?: components["schemas"]["CmsPage"];
      cmsPageId?: string;
      cmsPageVersionId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: int64 */
      duration: number;
      easing: string;
      /** Format: int64 */
      easingDegree: number;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplate: {
      active?: boolean;
      configurations?: components["schemas"]["SwagCustomizedProductsTemplateConfiguration"];
      confirmInput?: boolean;
      /** Format: date-time */
      createdAt: string;
      decisionTree?: Record<string, never>;
      description?: string;
      displayName: string;
      exclusions?: components["schemas"]["SwagCustomizedProductsTemplateExclusion"];
      id?: string;
      internalName: string;
      media?: components["schemas"]["Media"];
      mediaId?: string;
      options?: components["schemas"]["SwagCustomizedProductsTemplateOption"];
      optionsAutoCollapse?: boolean;
      parentVersionId?: string;
      products?: components["schemas"]["Product"];
      stepByStep?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateConfiguration: {
      configuration: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      hash: string;
      id?: string;
      template?: components["schemas"]["SwagCustomizedProductsTemplate"];
      templateConfigurationShares?: components["schemas"]["SwagCustomizedProductsTemplateConfigurationShare"];
      templateId: string;
      templateVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateConfigurationJsonApi: components["schemas"]["resource"] & {
      configuration: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      hash: string;
      id?: string;
      relationships?: {
        template?: {
          data?: {
            /** @example 1f7c46b0461d4e16a1f854d112c2a80e */
            id?: string;
            /** @example swag_customized_products_template */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-configuration/f00db67fd1af45c68aa51e5aca027079/template
             */
            related?: string;
          };
        };
        templateConfigurationShares?: {
          data?: {
            /** @example 6cf7371dd93c49838d80d5d406505000 */
            id?: string;
            /** @example swag_customized_products_template_configuration_share */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-configuration/f00db67fd1af45c68aa51e5aca027079/templateConfigurationShares
             */
            related?: string;
          };
        };
      };
      templateId: string;
      templateVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateConfigurationShare: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateExclusion: {
      conditions?: components["schemas"]["SwagCustomizedProductsTemplateExclusionCondition"];
      /** Format: date-time */
      createdAt: string;
      id?: string;
      name: string;
      template?: components["schemas"]["SwagCustomizedProductsTemplate"];
      templateId: string;
      templateVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateExclusionCondition: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      templateExclusion?: components["schemas"]["SwagCustomizedProductsTemplateExclusion"];
      templateExclusionId: string;
      templateExclusionOperator?: components["schemas"]["SwagCustomizedProductsTemplateExclusionOperator"];
      templateExclusionOperatorId: string;
      templateExclusionVersionId?: string;
      templateOption?: components["schemas"]["SwagCustomizedProductsTemplateOption"];
      templateOptionId: string;
      templateOptionValues?: components["schemas"]["SwagCustomizedProductsTemplateOptionValue"];
      templateOptionVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateExclusionOperator: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      label: string;
      operator: string;
      templateExclusionConditions?: components["schemas"]["SwagCustomizedProductsTemplateExclusionCondition"];
      templateOptionType: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateJsonApi: components["schemas"]["resource"] & {
      active?: boolean;
      confirmInput?: boolean;
      /** Format: date-time */
      createdAt: string;
      decisionTree?: Record<string, never>;
      description?: string;
      displayName: string;
      id?: string;
      internalName: string;
      mediaId?: string;
      optionsAutoCollapse?: boolean;
      parentVersionId?: string;
      relationships?: {
        configurations?: {
          data?: {
            /** @example f7e660e467e44bff91e27fc61c9af01a */
            id?: string;
            /** @example swag_customized_products_template_configuration */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template/756287a5fedd43f3a382305b2d00da2c/configurations
             */
            related?: string;
          };
        };
        exclusions?: {
          data?: {
            /** @example d73076eeaea547de99a19c54fe95735b */
            id?: string;
            /** @example swag_customized_products_template_exclusion */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template/756287a5fedd43f3a382305b2d00da2c/exclusions
             */
            related?: string;
          };
        };
        media?: {
          data?: {
            /** @example 8372563d32984eaf823286f289b284fe */
            id?: string;
            /** @example media */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template/756287a5fedd43f3a382305b2d00da2c/media
             */
            related?: string;
          };
        };
        options?: {
          data?: {
            /** @example f1f03edf3ea549e3ae1ba3da53219429 */
            id?: string;
            /** @example swag_customized_products_template_option */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template/756287a5fedd43f3a382305b2d00da2c/options
             */
            related?: string;
          };
        };
        products?: {
          data?: {
            /** @example cde0ffc74aea42dfb65a829577e8e853 */
            id?: string;
            /** @example product */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template/756287a5fedd43f3a382305b2d00da2c/products
             */
            related?: string;
          };
        };
      };
      stepByStep?: boolean;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOption: {
      advancedSurcharge?: boolean;
      calculatedPrice?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      description?: string;
      displayName: string;
      id?: string;
      itemNumber?: string;
      oneTimeSurcharge?: boolean;
      /** Format: float */
      percentageSurcharge?: number;
      placeholder?: string;
      /** Format: int64 */
      position?: number;
      price?: Record<string, never>;
      prices?: components["schemas"]["SwagCustomizedProductsTemplateOptionPrice"];
      relativeSurcharge?: boolean;
      required?: boolean;
      tax?: components["schemas"]["Tax"];
      taxId?: string;
      template?: components["schemas"]["SwagCustomizedProductsTemplate"];
      templateExclusionConditions?: components["schemas"]["SwagCustomizedProductsTemplateExclusionCondition"];
      templateId: string;
      templateVersionId?: string;
      translated?: Record<string, never>;
      type: string;
      typeProperties?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      values?: components["schemas"]["SwagCustomizedProductsTemplateOptionValue"];
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOptionJsonApi: components["schemas"]["resource"] & {
      advancedSurcharge?: boolean;
      calculatedPrice?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      description?: string;
      displayName: string;
      id?: string;
      itemNumber?: string;
      oneTimeSurcharge?: boolean;
      /** Format: float */
      percentageSurcharge?: number;
      placeholder?: string;
      /** Format: int64 */
      position?: number;
      price?: Record<string, never>;
      relationships?: {
        prices?: {
          data?: {
            /** @example 2d1d898e4d77463d9484d2f7b1806c81 */
            id?: string;
            /** @example swag_customized_products_template_option_price */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option/b3a53129ef654d5db1a4634634969940/prices
             */
            related?: string;
          };
        };
        tax?: {
          data?: {
            /** @example 15d5a9b8dae14b2d985b2d0f2750cf01 */
            id?: string;
            /** @example tax */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option/b3a53129ef654d5db1a4634634969940/tax
             */
            related?: string;
          };
        };
        template?: {
          data?: {
            /** @example 68d736d961d046239094ed7ba9d14549 */
            id?: string;
            /** @example swag_customized_products_template */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option/b3a53129ef654d5db1a4634634969940/template
             */
            related?: string;
          };
        };
        templateExclusionConditions?: {
          data?: {
            /** @example ebe28bc01bb241a5a4a5c9d152c287a5 */
            id?: string;
            /** @example swag_customized_products_template_exclusion_condition */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option/b3a53129ef654d5db1a4634634969940/templateExclusionConditions
             */
            related?: string;
          };
        };
        values?: {
          data?: {
            /** @example 4d0c983fcc5e4c388234097b6d671b64 */
            id?: string;
            /** @example swag_customized_products_template_option_value */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option/b3a53129ef654d5db1a4634634969940/values
             */
            related?: string;
          };
        };
      };
      relativeSurcharge?: boolean;
      required?: boolean;
      taxId?: string;
      templateId: string;
      templateVersionId?: string;
      translated?: Record<string, never>;
      type: string;
      typeProperties?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOptionPrice: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: float */
      percentageSurcharge?: number;
      price?: Record<string, never>;
      rule?: components["schemas"]["Rule"];
      ruleId?: string;
      templateOption?: components["schemas"]["SwagCustomizedProductsTemplateOption"];
      templateOptionId: string;
      templateOptionVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOptionValue: {
      advancedSurcharge?: boolean;
      /** Format: date-time */
      createdAt: string;
      default?: boolean;
      displayName: string;
      id?: string;
      itemNumber?: string;
      oneTimeSurcharge?: boolean;
      /** Format: float */
      percentageSurcharge?: number;
      /** Format: int64 */
      position: number;
      price?: Record<string, never>;
      prices?: components["schemas"]["SwagCustomizedProductsTemplateOptionValuePrice"];
      relativeSurcharge?: boolean;
      tax?: components["schemas"]["Tax"];
      taxId?: string;
      templateExclusionConditions?: components["schemas"]["SwagCustomizedProductsTemplateExclusionCondition"];
      templateOption?: components["schemas"]["SwagCustomizedProductsTemplateOption"];
      templateOptionId: string;
      templateOptionVersionId?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      value?: Record<string, never>;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOptionValueJsonApi: components["schemas"]["resource"] & {
      advancedSurcharge?: boolean;
      /** Format: date-time */
      createdAt: string;
      default?: boolean;
      displayName: string;
      id?: string;
      itemNumber?: string;
      oneTimeSurcharge?: boolean;
      /** Format: float */
      percentageSurcharge?: number;
      /** Format: int64 */
      position: number;
      price?: Record<string, never>;
      relationships?: {
        prices?: {
          data?: {
            /** @example 73aff29a012f45e08b1fc4cf1152333a */
            id?: string;
            /** @example swag_customized_products_template_option_value_price */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option-value/35138ceb624e4e1eac123a342e4c4ef0/prices
             */
            related?: string;
          };
        };
        tax?: {
          data?: {
            /** @example 3731e61173f14cd2a127db24d55bf76f */
            id?: string;
            /** @example tax */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option-value/35138ceb624e4e1eac123a342e4c4ef0/tax
             */
            related?: string;
          };
        };
        templateExclusionConditions?: {
          data?: {
            /** @example 957e34aed872412eaa373f672bc56b0d */
            id?: string;
            /** @example swag_customized_products_template_exclusion_condition */
            type?: string;
          }[];
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option-value/35138ceb624e4e1eac123a342e4c4ef0/templateExclusionConditions
             */
            related?: string;
          };
        };
        templateOption?: {
          data?: {
            /** @example 3562b32c3d624c11802c023ee9a40ada */
            id?: string;
            /** @example swag_customized_products_template_option */
            type?: string;
          };
          links?: {
            /**
             * Format: uri-reference
             * @example /swag-customized-products-template-option-value/35138ceb624e4e1eac123a342e4c4ef0/templateOption
             */
            related?: string;
          };
        };
      };
      relativeSurcharge?: boolean;
      taxId?: string;
      templateOptionId: string;
      templateOptionVersionId?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
      value?: Record<string, never>;
      versionId?: string;
    };
    /** Added since version: */
    SwagCustomizedProductsTemplateOptionValuePrice: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: float */
      percentageSurcharge?: number;
      price?: Record<string, never>;
      rule?: components["schemas"]["Rule"];
      ruleId?: string;
      templateOptionValue?: components["schemas"]["SwagCustomizedProductsTemplateOptionValue"];
      templateOptionValueId: string;
      templateOptionValueVersionId?: string;
      /** Format: date-time */
      updatedAt?: string;
      versionId?: string;
    };
    /** Added since version: */
    SwagDynamicAccessLandingPageRule: {
      id?: string;
      landingPage?: components["schemas"]["LandingPage"];
      landingPageId: string;
      landingPageVersionId?: string;
      rule?: components["schemas"]["Rule"];
      ruleId: string;
    };
    /** Added since version: */
    SwagDynamicAccessProductRule: {
      id?: string;
      product?: components["schemas"]["Product"];
      productId: string;
      productVersionId?: string;
      rule?: components["schemas"]["Rule"];
      ruleId: string;
    };
    /** Added since version: */
    SwagLanguagePackLanguage: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationConnection: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationData: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationGeneralSetting: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationLogging: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationMapping: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationMediaFile: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagMigrationRun: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagPaypalPosSalesChannel: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagPaypalPosSalesChannelRun: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagPaypalPosSalesChannelRunLog: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagSocialShoppingCustomer: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagSocialShoppingOrder: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagSocialShoppingProductError: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    SwagSocialShoppingSalesChannel: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    SystemConfig: {
      configurationKey: string;
      configurationValue: {
        _value?: Record<string, never>;
      };
      /** Format: date-time */
      createdAt: string;
      id?: string;
      salesChannel?: components["schemas"]["SalesChannel"];
      salesChannelId?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Tag: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Tax: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      /**
       * Format: int64
       * Added since version: 6.4.0.0.
       */
      position: number;
      /** Format: float */
      taxRate: number;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.1.0.0 */
    TaxRule: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.1.0.0 */
    TaxRuleType: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Theme: {
      active: boolean;
      author: string;
      baseConfig?: Record<string, never>;
      configValues?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      description?: string;
      helpTexts?: Record<string, never>;
      id?: string;
      labels?: Record<string, never>;
      media?: components["schemas"]["Media"];
      name: string;
      parentThemeId?: string;
      previewMediaId?: string;
      technicalName?: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    Unit: {
      /** Format: date-time */
      createdAt: string;
      customFields?: Record<string, never>;
      id?: string;
      name: string;
      shortCode: string;
      translated?: Record<string, never>;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    User: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    UserAccessKey: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.5.0 */
    UserConfig: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.0.0.0 */
    UserRecovery: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    Warehouse: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: */
    WarehouseGroup: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.3.1.0 */
    Webhook: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    /** Added since version: 6.4.1.0 */
    WebhookEventLog: {
      /** Format: date-time */
      createdAt: string;
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    WishlistLoadRouteResponse: {
      products?: components["schemas"]["ProductListingResult"][];
      wishlist?: {
        customerId?: string;
        salesChannelId?: string;
      };
    };
  };
  responses: {
    /** No Content */
    204: never;
    /** Bad Request */
    400: {
      content: {
        "application/json": components["schemas"]["failure"];
        "application/vnd.api+json": components["schemas"]["failure"];
      };
    };
    /** Unauthorized */
    401: {
      content: {
        "application/json": components["schemas"]["failure"];
        "application/vnd.api+json": components["schemas"]["failure"];
      };
    };
    /** Forbidden */
    403: {
      content: {
        "application/json": components["schemas"]["failure"];
        "application/vnd.api+json": components["schemas"]["failure"];
      };
    };
    /** Not Found */
    404: {
      content: {
        "application/json": components["schemas"]["failure"];
        "application/vnd.api+json": components["schemas"]["failure"];
      };
    };
  };
  parameters: {
    /** Accepted response content types */
    accept: string;
    /** Content type of the request */
    contentType: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = {
  createCustomerAddress: {
    /**
     * Create a new address for a customer
     * Creates a new address for a customer.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomerAddress"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddress"];
        };
      };
    };
  };
  deleteCustomerAddress: {
    /**
     * Delete an address of a customer
     * Delete an address of customer.
     *
     *     Only addresses which are not set as default addresses for shipping or billing can be deleted. You can check the current default addresses of your customer using the profile information endpoint and change them using the default address endpoint.
     *
     *     **A customer must have at least one address (which can be used for shipping and billing).**
     *
     *     An automatic fallback is not applied.
     */
    parameters: {
      /** ID of the address to be deleted. */
      path: {
        addressId: string;
      };
    };
    responses: {
      /** No Content response, when the address has been deleted */
      204: never;
      /** Response containing a list of errors, most likely due to the address being in use */
      400: never;
    };
  };
  updateCustomerAddress: {
    /**
     * Modify an address of a customer
     * Modifies an existing address of a customer.
     */
    parameters: {
      /** Address ID */
      path: {
        addressId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CustomerAddress"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddress"];
        };
      };
    };
  };
  defaultBillingAddress: {
    /**
     * Change a customer's default billing address
     * Updates the default (preselected) billing addresses of a customer.
     */
    parameters: {
      /** Address ID */
      path: {
        addressId: string;
      };
    };
    responses: {
      200: never;
    };
  };
  defaultShippingAddress: {
    /**
     * Change a customer's default shipping address
     * Updates the default (preselected) shipping addresses of a customer.
     */
    parameters: {
      /** Address ID */
      path: {
        addressId: string;
      };
    };
    responses: {
      200: never;
    };
  };
  changeEmail: {
    /**
     * Change the customer's email address
     * Changes a customer's email address to a new email address, using their current password as a validation.
     */
    requestBody: {
      content: {
        "application/json": {
          /** New email address. Has to be unique amongst all customers */
          email: string;
          /** Confirmation of the new email address. */
          emailConfirmation: string;
          /** Customer's current password */
          password: string;
        };
      };
    };
    responses: {
      /** Returns a success response indicating a successful update */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  changeLanguage: {
    /**
     * Change the customer's language.
     * Changes the language of the logged in customer
     */
    requestBody: {
      content: {
        "application/json": {
          /** New languageId */
          language?: string;
        };
      };
    };
    responses: {
      /** Returns a success response indicating a successful update */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  changePassword: {
    /**
     * Change the customer's password
     * Changes a customer's password using their current password as a validation.
     */
    requestBody: {
      content: {
        "application/json": {
          /** New Password for the customer */
          newPassword: string;
          /** Confirmation of the new password */
          newPasswordConfirm: string;
          /** Current password of the customer */
          password: string;
        };
      };
    };
    responses: {
      /** Returns a success response indicating a successful update. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  changePaymentMethod: {
    /**
     * Change the customer's default payment method
     * Changes a customer's default (preselected) payment method.
     */
    parameters: {
      /** Identifier of the desired default payment method */
      path: {
        paymentMethodId: string;
      };
    };
    responses: {
      /** Returns a success response indicating a successful update. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  changeProfile: {
    /**
     * Change the customer's information
     * Make changes to a customer's account, like changing their name, salutation or title.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Birthday day */
          birthdayDay?: number;
          /** Birthday month */
          birthdayMonth?: number;
          /** Birthday year */
          birthdayYear?: number;
          /** Company of the customer. Only required when `accountType` is `business`. */
          company?: string;
          /** Customer first name. Value will be reused for shipping and billing address if not provided explicitly. */
          firstName: string;
          /** Customer last name. Value will be reused for shipping and billing address if not provided explicitly. */
          lastName: string;
          /** Id of the salutation for the customer account. Fetch options using `salutation` endpoint. */
          salutationId: string;
          /** (Academic) title of the customer */
          title?: string;
        };
      };
    };
    responses: {
      /** Returns a success response indicating a successful update */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  readCustomer: {
    /**
     * Get information about current customer
     * Returns information about the current customer.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Returns the logged in customer, also for guest sessions. Check for the value of `guest` field to see whether the customer is a guest. */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  deleteCustomer: {
    /**
     * Delete the customer's profile
     * Deletes a customer profile along with their addresses, wishlists and associated data. Created orders and their payment/shipping information (addresses) and reviews are not deleted.
     */
    responses: {
      /** Returns a no content response indicating a successful removal of the customer profile */
      204: never;
    };
  };
  getCustomerRecoveryIsExpired: {
    /**
     * Checks if the customer recovery entry for a given hash is expired.
     * This can be used to validate a provided hash has a valid and not expired customer recovery hash.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Parameter from the link in the confirmation mail sent in Step 1 */
          hash: string;
        };
      };
    };
    responses: {
      /** Returns a CustomerRecoveryIsExpiredResponse that indicates if the hash is expired or not. */
      200: {
        content: {
          "application/json": components["schemas"]["ArrayStruct"];
        };
      };
    };
  };
  listAddress: {
    /**
     * Fetch addresses of a customer
     * Lists all addresses of the current customer and allows filtering them based on a criteria.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddress"][];
        };
      };
    };
  };
  loginCustomer: {
    /**
     * Log in a customer
     * Logs in customers given their credentials.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Password */
          password: string;
          /** Email */
          username: string;
        };
      };
    };
    responses: {
      /** A successful login returns a context token which is associated with the logged in user. Use that as your `sw-context-token` header for subsequent requests. */
      200: {
        content: {
          "application/json": components["schemas"]["ContextTokenResponse"];
        };
      };
      /** If credentials are incorrect an error is returned */
      401: {
        content: {
          "application/json": components["schemas"]["failure"];
        };
      };
    };
  };
  logoutCustomer: {
    /**
     * Log out a customer
     * Logs out a customer.
     */
    responses: {
      /** A successful logout returns a context token for the anonymous user. Use that as your `sw-context-token` header for subsequent requests. */
      200: {
        content: {
          "application/json": components["schemas"]["ContextTokenResponse"];
        };
      };
      403: components["responses"]["403"];
    };
  };
  readNewsletterRecipient: {
    /**
     * Fetch newsletter recipients
     * Perform a filtered search for newsletter recipients.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  sendRecoveryMail: {
    /**
     * Send a password recovery mail
     * This operation is Step 1 of the password reset flow. Make sure to implement Step 2 "Reset password with recovery credentials" in order to allow for the complete flow in your application. Sends a recovery mail containing a link with credentials that allows a customer to reset their password.
     */
    requestBody: {
      content: {
        "application/json": {
          /** E-Mail address to identify the customer */
          email: string;
          /** URL of the storefront to use for the generated reset link. It has to be a domain that is configured in the sales channel domain settings. */
          storefrontUrl: string;
        };
      };
    };
    responses: {
      /**
       * If email corresponds to an existing customer, a mail will be sent out to that customer containing a link assembled using the following schema:
       *
       * Returns a success indicating a successful initialisation of the reset flow.
       */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  recoveryPassword: {
    /**
     * Reset a password with recovery credentials
     * This operation is Step 2 of the password reset flow. It is required to conduct Step 1 "Send a password recovery mail" in order to obtain the required credentials for this step.Resets a customer's password using credentials from a password recovery mail as a validation.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Parameter from the link in the confirmation mail sent in Step 1 */
          hash: string;
          /** New password for the customer */
          newPassword: string;
          /** Confirmation of the new password */
          newPasswordConfirm: string;
        };
      };
    };
    responses: {
      /** Returns a success response indicating a successful update. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  register: {
    /**
     * Register a customer
     * Registers a customer. Used both for normal customers and guest customers.See the Guide "Register a customer" for more information on customer registration.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Flag indicating accepted data protection */
          acceptedDataProtection: boolean;
          /**
           * Account type of the customer which can be either `private` or `business`.
           * @default private
           */
          accountType?: string;
          /** Field can be used to store an affiliate tracking code */
          affiliateCode?: string;
          billingAddress: components["schemas"]["CustomerAddress"];
          /** Birthday day */
          birthdayDay?: number;
          /** Birthday month */
          birthdayMonth?: number;
          /** Birthday year */
          birthdayYear?: number;
          /** Field can be used to store a campaign tracking code */
          campaignCode?: string;
          /** Email of the customer. Has to be unique, unless `guest` is `true` */
          email: string;
          /** Customer first name. Value will be reused for shipping and billing address if not provided explicitly. */
          firstName: string;
          /**
           * If set, will create a guest customer. Guest customers can re-use an email address and don't need a password.
           * @default false
           */
          guest?: boolean;
          /** Customer last name. Value will be reused for shipping and billing address if not provided explicitly. */
          lastName: string;
          /** Password for the customer. Required, unless `guest` is `true` */
          password: string;
          /** Id of the salutation for the customer account. Fetch options using `salutation` endpoint. */
          salutationId: string;
          shippingAddress?: components["schemas"]["CustomerAddress"];
          /** URL of the storefront for that registration. Used in confirmation emails. Has to be one of the configured domains of the sales channel. */
          storefrontUrl: string;
          /** (Academic) title of the customer */
          title?: string;
        };
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  registerConfirm: {
    /**
     * Confirm a customer registration
     * Confirms a customer registration when double opt-in is activated.
     *
     * Learn more about double opt-in registration in our guide "Register a customer".
     */
    requestBody: {
      content: {
        "application/json": {
          /** Email hash from the email received */
          em: string;
          /** Hash from the email received */
          hash: string;
        };
      };
    };
    responses: {
      /** Returns the logged in customer. The customer is automatically logged in with the `sw-context-token` header provided, which can be reused for subsequent requests. */
      200: never;
      /** No hash provided */
      404: never;
      /** The customer has already been confirmed */
      412: never;
    };
  };
  readCategoryList: {
    /**
     * Fetch a list of categories
     * Perform a filtered search for categories.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing categories. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Category"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readCategory: {
    /**
     * Fetch a single category
     * This endpoint returns information about the category, as well as a fully resolved (hydrated with mapping values) CMS page, if one is assigned to the category. You can pass slots which should be resolved exclusively.
     */
    parameters: {
      /** Resolves only the given slot identifiers. The identifiers have to be seperated by a '|' character */
      query?: {
        slots?: string;
      };
      /** Identifier of the category to be fetched */
      path: {
        navigationId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"] &
          components["schemas"]["ProductListingCriteria"];
      };
    };
    responses: {
      /** The loaded category with cms page */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
    };
  };
  readCart: {
    /**
     * Fetch or create a cart
     * Used to fetch the current cart or for creating a new one.
     */
    parameters?: {
      /** The name of the new cart. This parameter will only be used when creating a new cart. */
      query?: {
        name?: string;
      };
    };
    responses: {
      /** Cart */
      200: {
        content: {
          "application/json": components["schemas"]["Cart"];
        };
      };
    };
  };
  deleteCart: {
    /**
     * Delete a cart
     * This route deletes the cart of the customer.
     */
    responses: {
      /** Successfully deleted the cart */
      204: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  addLineItem: {
    /**
     * Add items to the cart
     * This route adds items to the cart. An item can be a product or promotion for example. They are referenced by the `referencedId`-parameter.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#adding-new-items-to-the-cart)
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CartItems"];
      };
    };
    responses: {
      /** The updated cart. */
      200: {
        content: {
          "application/json": components["schemas"]["Cart"];
        };
      };
    };
  };
  removeLineItem: {
    /**
     * Remove items from the cart
     * This route removes items from the cart and recalculates it.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#deleting-items-in-the-cart)
     */
    parameters: {
      /** A list of product identifiers. */
      query: {
        ids: string[];
      };
    };
    responses: {
      /** The updated cart. */
      200: {
        content: {
          "application/json": components["schemas"]["Cart"];
        };
      };
    };
  };
  updateLineItem: {
    /**
     * Update items in the cart
     * This route updates items in the cart. A typical example is updating the quantity of an item.
     *
     * Example: [Working with the cart - Guide](https://developer.shopware.com/docs/guides/integrations-api/store-api-guide/work-with-the-cart#updating-items-in-the-cart)
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CartItems"];
      };
    };
    responses: {
      /** The updated cart. */
      200: {
        content: {
          "application/json": components["schemas"]["Cart"];
        };
      };
    };
  };
  createOrder: {
    /**
     * Create an order from a cart
     * Creates a new order from the current cart and deletes the cart.
     *
     * If you are using the [prepared payment flow](https://developer.shopware.com/docs/concepts/commerce/checkout-concept/payments#2.1-prepare-payment-optional), this endpoint also receives additional transaction details. The exact name of the parameters depends on the implementation of the corresponding *payment handler*.
     */
    /** Contains additional metadata which is stored together with the order. It can also contain payment transaction details. */
    requestBody?: {
      content: {
        "application/json": {
          /** The affiliate code can be used to track which referrer the customer came through. An example could be `Price-comparison-company-XY`. */
          affiliateCode?: string;
          /** The campaign code is used to track which action the customer came from. An example could be `Summer-Deals` */
          campaignCode?: string;
          /** Adds a comment from the customer to the order. */
          customerComment?: string;
        };
      };
    };
    responses: {
      /** Order */
      200: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
    };
  };
  readCms: {
    /**
     * Fetch and resolve a CMS page
     * Loads a content management page by its identifier and resolve the slot data. This could be media files, product listing and so on.
     *
     * **Important notice**
     *
     * The criteria passed with this route also affects the listing, if there is one within the cms page.
     */
    parameters: {
      /** Identifier of the CMS page to be resolved */
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** Resolves only the given slot identifiers. The identifiers have to be seperated by a `|` character. */
          slots?: string;
        } & components["schemas"]["ProductListingCriteria"];
      };
    };
    responses: {
      /** The loaded cms page */
      200: {
        content: {
          "application/json": components["schemas"]["CmsPage"];
        };
      };
      404: components["responses"]["404"];
    };
  };
  sendContactMail: {
    /**
     * Submit a contact form message
     * Used for submitting contact forms. Be aware that there can be more required fields, depending on the system settings.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Type of the content management page */
          cmsPageType?: string;
          /** The message of the contact form */
          comment: string;
          /** Email address */
          email: string;
          /** Entity name for slot config */
          entityName?: string;
          /** Firstname. This field may be required depending on the system settings. */
          firstName?: string;
          /** Lastname. This field may be required depending on the system settings. */
          lastName?: string;
          /**
           * Identifier of the navigation page. Can be used to override the configuration.
           * Take a look at the settings of a category containing a concact form in the administration.
           */
          navigationId?: string;
          /** Phone. This field may be required depending on the system settings. */
          phone?: string;
          /** Identifier of the salutation. Use `/api/salutation` endpoint to fetch possible values. */
          salutationId: string;
          /** Identifier of the cms element */
          slotId?: string;
          /** The subject of the contact form. */
          subject: string;
        };
      };
    };
    responses: {
      /** Message sent successful. */
      200: never;
    };
  };
  readContext: {
    /**
     * Fetch the current context
     * Fetches the current context. This includes for example the `customerGroup`, `currency`, `taxRules` and many more.
     */
    responses: {
      /** Returns the current context. */
      200: {
        content: {
          "application/json": components["schemas"]["SalesChannelContext"];
        };
      };
    };
  };
  updateContext: {
    /**
     * Modify the current context
     * Used for switching the context. A typical example would be changing the language or changing the currency.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Billing Address */
          billingAddressId?: string;
          /** Country */
          countryId?: string;
          /** Country State */
          countryStateId?: string;
          /** Currency */
          currencyId?: string;
          /** Language */
          languageId?: string;
          /** Payment Method */
          paymentMethodId?: string;
          /** Shipping Address */
          shippingAddressId?: string;
          /** Shipping Method */
          shippingMethodId?: string;
        };
      };
    };
    responses: {
      /** Returns the context token. Use that as your `sw-context-token` header for subsequent requests. Redirect if getRedirectUrl is set. */
      200: {
        content: {
          "application/json": components["schemas"]["ContextTokenResponse"];
        };
      };
    };
  };
  readCountry: {
    /**
     * Fetch countries
     * Perform a filtered search for countries
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing countries. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Country"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readCountryState: {
    /**
     * Fetch the states of a country
     * Perform a filtered search the states for a country
     */
    parameters: {
      path: {
        countryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing countries. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["CountryState"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readCurrency: {
    /**
     * Fetch currencies
     * Perform a filtered search for currencies.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing currencies. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Currency"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  getCustomerGroupRegistrationInfo: {
    /** Fetch registration settings for customer group */
    parameters: {
      /** Customer group id */
      path: {
        customerGroupId: string;
      };
    };
    responses: {
      /** Returns the customer group including registration settings. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerGroup"];
        };
      };
    };
  };
  readCustomerWishlist: {
    /**
     * Fetch a wishlist
     * Fetch a customer's wishlist. Products on the wishlist can be filtered using a criteria object.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WishlistLoadRouteResponse"];
        };
      };
    };
  };
  addProductOnWishlist: {
    /**
     * Add a product to a wishlist
     * Adds a product to a customers wishlist.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    responses: {
      /** Returns a success response. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  deleteProductOnWishlist: {
    /**
     * Remove a product from a wishlist
     * Removes a product from a customer's wishlist.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * The wishlist feature has to be activated.
     */
    parameters: {
      /** The identifier of the product to be removed from the wishlist. */
      path: {
        productId: string;
      };
    };
    responses: {
      /** Returns a success response indicating a successful removal. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
      /** The removal of the product failed. Probably because the product could not be found on the wishlist. */
      404: {
        content: {
          "application/json": components["schemas"]["failure"];
        };
      };
    };
  };
  mergeProductOnWishlist: {
    /**
     * Create a wishlist for a customer
     * Create a new wishlist for a logged in customer or extend the existing wishlist given a set of products.
     *
     *     **Important constraints**
     *
     *     * Anonymous (not logged-in) customers can not have wishlists.
     *     * A customer can only have a single wishlist.
     *     * The wishlist feature has to be activated.
     */
    requestBody: {
      content: {
        "application/json": {
          /** List product id */
          productIds?: string[];
        };
      };
    };
    responses: {
      /** Returns a success response. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  download: {
    /**
     * Download generated document
     * Returns blob file of a generated document to download.
     */
    parameters: {
      path: {
        documentId: string;
        deepLinkCode: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Returns the document information and blob to download. */
      200: {
        content: {
          "application/json": components["schemas"]["Document"];
        };
      };
    };
  };
  handlePaymentMethod: {
    /**
     * Initiate a payment for an order
     * This generic endpoint is should be called to initiate a payment flow after an order has been created. The details of the payment flow can differ depending on the payment integration and might require calling additional operations or the setup of webhooks.
     *
     * The endpoint internally calls the payment handler of the payment method currently set for the order.
     */
    requestBody: {
      content: {
        "application/json": {
          /** URL to which the client should be redirected after erroneous payment */
          errorUrl?: string;
          /** URL to which the client should be redirected after successful payment */
          finishUrl?: string;
          /** Identifier of an order */
          orderId: string;
        };
      };
    };
    responses: {
      /** Redirect to external payment provider */
      200: never;
    };
  };
  readLandingPage: {
    /**
     * Fetch a landing page with the resolved CMS page
     * Loads a landing page by its identifier and resolves the CMS page.
     *
     * **Important notice**
     *
     * The criteria passed with this route also affects the listing, if there is one within the cms page.
     */
    parameters: {
      /** Identifier of the landing page. */
      path: {
        landingPageId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"] &
          ({
            /** Resolves only the given slot identifiers. The identifiers have to be seperated by a `|` character. */
            slots?: string;
          } & components["schemas"]["ProductListingCriteria"]);
      };
    };
    responses: {
      /** The loaded landing page with cms page */
      200: {
        content: {
          "application/json": components["schemas"]["LandingPage"];
        };
      };
      404: components["responses"]["404"];
    };
  };
  readLanguages: {
    /**
     * Fetch languages
     * Perform a filtered search for languages.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing languages. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Language"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readNavigation: {
    /**
     * Fetch a navigation menu
     * This endpoint returns categories that can be used as a page navigation. You can either return them as a tree or as a flat list. You can also control the depth of the tree.
     *
     *     Instead of passing uuids, you can also use one of the following aliases for the activeId and rootId parameters to get the respective navigations of your sales channel.
     *
     *      * main-navigation
     *      * service-navigation
     *      * footer-navigation
     */
    parameters: {
      /** Instructs Shopware to try and resolve SEO URLs for the given navigation item */
      header?: {
        "sw-include-seo-urls"?: boolean;
      };
      /** Identifier of the active category in the navigation tree (if not used, just set to the same as rootId). */
      /** Identifier of the root category for your desired navigation tree. You can use it to fetch sub-trees of your navigation tree. */
      path: {
        activeId: string;
        rootId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Criteria"] & {
          /** Return the categories as a tree or as a flat list. */
          buildTree?: Record<string, never>;
          /** Determines the depth of fetched navigation levels. */
          depth?: Record<string, never>;
        };
      };
    };
    responses: {
      /** All available navigations */
      200: {
        content: {
          "application/json": components["schemas"]["NavigationRouteResponse"];
        };
      };
    };
  };
  confirmNewsletter: {
    /**
     * Confirm a newsletter registration
     * You have to use the hash from the link sent out via email to confirm the user registration.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Email hash parameter from the link in the confirmation mail */
          em: string;
          /** Hash parameter from link the in the confirmation mail */
          hash: string;
        };
      };
    };
    responses: {
      /** The newsletter confirmation was successful. */
      200: never;
    };
  };
  subscribeToNewsletter: {
    /**
     * Create or remove a newsletter subscription
     * This route is used to create/remove/confirm a newsletter subscription.
     *
     * The `option` property controls what should happen:
     * * `direct`: The subscription is directly active and does not need a confirmation.
     * * `subscribe`: An email will be send to the provided email addrees containing a link to the /newsletter/confirm route.
     * The subscription is only successful, if the /newsletter/confirm route is called with the generated hashes.
     * * `unsubscribe`: The email address will be removed from the newsletter subscriptions.
     * * `confirmSubscribe`: Confirmes the newsletter subscription for the provided email address.
     */
    requestBody: {
      content: {
        "application/json": {
          /** City */
          city?: string;
          /** Custom field data that should be added to the subscription. */
          customFields?: string;
          /** Email address that will receive the confirmation and the newsletter. */
          email: string;
          /** First name */
          firstName?: string;
          /** Identifier of the language. */
          languageId?: Record<string, never>;
          /** Last name */
          lastName?: string;
          /** Defines what should be done. */
          option: Record<string, never>;
          /** Identifier of the salutation. */
          salutationId?: Record<string, never>;
          /** Url of the storefront of the shop. This will be used for generating the link to the /newsletter/confirm inside the confirm email. */
          storefrontUrl: string;
          /** Street */
          street?: string;
          /** Zip code */
          tags?: string;
          /** Zip code */
          zipCode?: string;
        };
      };
    };
    responses: {
      /** Success */
      200: never;
    };
  };
  unsubscribeToNewsletter: {
    /**
     * Remove a newsletter subscription
     * Removes a newsletter recipient from the mailing lists.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Email address that should be removed from the mailing lists. */
          email: string;
        };
      };
    };
    responses: {
      /** Unsubscribing was successful. */
      200: never;
    };
  };
  readOrder: {
    /**
     * Fetch a list of orders
     * List orders of a customer.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Criteria"] & {
          /** Check if the payment method of the order is still changeable. */
          checkPromotion?: boolean;
        };
      };
    };
    responses: {
      /** An array of orders and an indicator if the payment of the order can be changed. */
      200: {
        content: {
          "application/json": components["schemas"]["OrderRouteResponse"];
        };
      };
    };
  };
  orderDownloadFile: {
    /**
     * Download a purchased file
     * Download a file included in the given order and with the given id. Access must be granted.
     */
    parameters: {
      path: {
        orderId: string;
        downloadId: string;
      };
    };
    responses: {
      /** An arbitrary binary file. */
      200: {
        content: {
          "application/octet-stream": unknown;
        };
      };
    };
  };
  orderSetPayment: {
    /**
     * Update the payment method of an order
     * Changes the payment method of a specific order. You can use the /order route to find out if the payment method of an order can be changed - take a look at the `paymentChangeable`- array in the response.
     */
    requestBody: {
      content: {
        "application/json": {
          /** The identifier of the order. */
          orderId: string;
          /** The identifier of the paymentMethod to be set */
          paymentMethodId: string;
        };
      };
    };
    responses: {
      /** Successfully updated the payment method of the order. */
      200: {
        content: {
          "application/json": components["schemas"]["SuccessResponse"];
        };
      };
    };
  };
  cancelOrder: {
    /**
     * Cancel an order
     * Cancels an order. The order state will be set to 'cancelled'.
     */
    requestBody: {
      content: {
        "application/json": {
          /** The identifier of the order to be canceled. */
          orderId?: string;
        };
      };
    };
    responses: {
      /**
       * Returns the state of the state machine
       *
       *     example: More information about the state machine can be found in the corresponding guide: [Using the state machine](https://developer.shopware.com/docs/guides/plugins/plugins/checkout/order/using-the-state-machine)
       */
      200: {
        content: {
          "application/json": components["schemas"]["StateMachineState"];
        };
      };
    };
  };
  readPaymentMethod: {
    /** Loads all available payment methods */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Criteria"] & {
          /** List only available */
          onlyAvailable?: boolean;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** aggregation result */
            aggregations?: Record<string, never>;
            elements?: components["schemas"]["PaymentMethod"][];
            /** Total amount */
            total?: number;
          };
        };
      };
    };
  };
  readProduct: {
    /**
     * Fetch a list of products
     * List products that match the given criteria. For performance ressons a limit should always be set.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing products */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Product"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readProductExport: {
    /** Export product export */
    parameters: {
      /** Access Key */
      /** File Name */
      path: {
        accessKey: string;
        fileName: string;
      };
    };
    responses: {
      200: never;
    };
  };
  readProductListing: {
    /**
     * Fetch a product listing by category
     * Fetches a product listing for a specific category. It also provides filters, sortings and property aggregations, analogous to the /search endpoint.
     */
    parameters: {
      /** Identifier of a category. */
      path: {
        categoryId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ProductListingCriteria"] &
          components["schemas"]["ProductListingFlags"];
      };
    };
    responses: {
      /** Returns a product listing containing all products and additional fields to display a listing. */
      200: {
        content: {
          "application/json": components["schemas"]["ProductListingResult"];
        };
      };
    };
  };
  readProductDetail: {
    /**
     * Fetch a single product
     * This route is used to load a single product with the corresponding details. In addition to loading the data, the best variant of the product is determined when a parent id is passed.
     */
    parameters: {
      /** Product ID */
      path: {
        productId: string;
      };
    };
    responses: {
      /** Product information along with variant groups and options */
      200: {
        content: {
          "application/json": components["schemas"]["ProductDetailResponse"];
        };
      };
    };
  };
  readProductCrossSellings: {
    /**
     * Fetch cross-selling groups of a product
     * This route is used to load the cross sellings for a product. A product has several cross selling definitions in which several products are linked. The route returns the cross sellings together with the linked products
     */
    parameters: {
      /** Product ID */
      path: {
        productId: string;
      };
    };
    responses: {
      /** Found cross sellings */
      200: {
        content: {
          "application/json": components["schemas"]["CrossSellingElementCollection"];
        };
      };
    };
  };
  searchProductVariantIds: {
    /**
     * Search for a matching variant by product options.
     * Performs a search for product variants and returns the best matching variant.
     */
    parameters: {
      /** Product ID */
      path: {
        productId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** The options parameter for the variant to find. */
          options: string[];
          /** The id of the option group that has been switched. */
          switchedGroup?: string;
        };
      };
    };
    responses: {
      /** Returns an FoundCombination struct containing the ids matching the search. */
      200: {
        content: {
          "application/json": components["schemas"]["FindProductVariantRouteResponse"];
        };
      };
    };
  };
  saveProductReview: {
    /**
     * Save a product review
     * Saves a review for a product. Reviews have to be activated in the settings.
     */
    parameters: {
      /** Identifier of the product which is reviewed. */
      path: {
        productId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** The content of review. */
          content: Record<string, never>;
          /** The email address of the review author. If not set, the email of the customer is chosen. */
          email?: string;
          /** The name of the review author. If not set, the first name of the customer is chosen. */
          name?: string;
          /** The review rating for the product. */
          points: Record<string, never>;
          /** The title of the review. */
          title: Record<string, never>;
        };
      };
    };
    responses: {
      /** Success response indicating the review was saved successfuly. */
      200: never;
    };
  };
  readProductReviews: {
    /**
     * Fetch product reviews
     * Perform a filtered search for product reviews.
     */
    parameters: {
      /** Identifier of the product. */
      path: {
        productId: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing product reviews */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["ProductReview"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  readSalutation: {
    /**
     * Fetch salutations
     * Perform a filtered search for salutations.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing salutations. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["Salutation"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
    };
  };
  postScriptStoreApiRoute: {
    /** Access point for different api logics which are provided by apps over script hooks */
    parameters: {
      /** Dynamic hook which used to build the hook name */
      path: {
        hook: string;
      };
    };
    responses: {
      /** Returns different structures of results based on the called script. */
      200: never;
    };
  };
  searchPage: {
    /**
     * Search for products
     * Performs a search for products which can be used to display a product listing.
     */
    requestBody?: {
      content: {
        "application/json": {
          /** Using the search parameter, the server performs a text search on all records based on their data model and weighting as defined in the entity definition using the SearchRanking flag. */
          search: string;
        } & components["schemas"]["ProductListingCriteria"] &
          components["schemas"]["ProductListingFlags"];
      };
    };
    responses: {
      /** Returns a product listing containing all products and additional fields to display a listing. */
      200: {
        content: {
          "application/json": components["schemas"]["ProductListingResult"];
        };
      };
    };
  };
  searchSuggest: {
    /**
     * Search for products (suggest)
     * Can be used to implement search previews or suggestion listings, that don’t require any interaction.
     */
    requestBody: {
      content: {
        "application/json": {
          /** Using the search parameter, the server performs a text search on all records based on their data model and weighting as defined in the entity definition using the SearchRanking flag. */
          search: string;
        } & components["schemas"]["ProductListingFlags"];
      };
    };
    responses: {
      /**
       * Returns a product listing containing all products and additional fields.
       *
       * Note: Aggregations, currentFilters and availableSortings are empty in this response. If you need them to display a listing, use the /search route instead.
       */
      200: {
        content: {
          "application/json": components["schemas"]["ProductListingResult"];
        };
      };
    };
  };
  readSeoUrl: {
    /**
     * Fetch SEO routes
     * Perform a filtered search for seo urls.
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      /** Entity search result containing seo urls. */
      200: {
        content: {
          "application/json": {
            elements?: components["schemas"]["SeoUrl"][];
          } & components["schemas"]["EntitySearchResult"];
        };
      };
      404: components["responses"]["404"];
    };
  };
  readShippingMethod: {
    /**
     * Fetch shipping methods
     * Perform a filtered search for shipping methods.
     */
    parameters?: {
      /** List only available shipping methods. This filters shipping methods methods which can not be used in the actual context because of their availability rule. */
      query?: {
        onlyAvailable?: boolean;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Criteria"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** aggregation result */
            aggregations?: Record<string, never>;
            elements?: components["schemas"]["ShippingMethod"][];
            /** Total amount */
            total?: number;
          };
        };
      };
    };
  };
  readSitemap: {
    /**
     * Fetch sitemaps
     * Fetches a list of compressed sitemap files, which are often used by search engines.
     */
    responses: {
      /** Returns a list of available sitemaps. */
      200: {
        content: {
          "application/json": components["schemas"]["Sitemap"][];
        };
      };
    };
  };
};

export type operationPaths =
  | "readSalutation post /salutation"
  | "searchSuggest post /search-suggest"
  | "sendContactMail post /contact-form"
  | "addProductOnWishlist post /customer/wishlist/add/{productId}"
  | "readCustomerWishlist post /customer/wishlist"
  | "mergeProductOnWishlist post /customer/wishlist/merge"
  | "deleteProductOnWishlist delete /customer/wishlist/delete/{productId}"
  | "readProductCrossSellings post /product/{productId}/cross-selling"
  | "readProductDetail post /product/{productId}"
  | "readProduct post /product"
  | "readProductReviews post /product/{productId}/reviews"
  | "saveProductReview post /product/{productId}/review"
  | "searchProductVariantIds post /product/{productId}/find-variant"
  | "readCms post /cms/{id}"
  | "confirmNewsletter post /newsletter/confirm"
  | "subscribeToNewsletter post /newsletter/subscribe"
  | "unsubscribeToNewsletter post /newsletter/unsubscribe"
  | "readNavigation post /navigation/{activeId}/{rootId} sw-include-seo-urls"
  | "readNewsletterRecipient post /account/newsletter-recipient"
  | "changeProfile post /account/change-profile"
  | "changeEmail post /account/change-email"
  | "changeLanguage post /account/change-language"
  | "changePassword post /account/change-password"
  | "changePaymentMethod post /account/change-payment-method/{paymentMethodId}"
  | "getCustomerRecoveryIsExpired post /account/customer-recovery-is-expired"
  | "readCustomer post /account/customer"
  | "deleteCustomer delete /account/customer"
  | "deleteCustomerAddress delete /account/address/{addressId}"
  | "updateCustomerAddress patch /account/address/{addressId}"
  | "listAddress post /account/list-address"
  | "loginCustomer post /account/login"
  | "logoutCustomer post /account/logout"
  | "registerConfirm post /account/register-confirm"
  | "register post /account/register"
  | "recoveryPassword post /account/recovery-password-confirm"
  | "sendRecoveryMail post /account/recovery-password"
  | "defaultShippingAddress patch /account/address/default-shipping/{addressId}"
  | "defaultBillingAddress patch /account/address/default-billing/{addressId}"
  | "createCustomerAddress post /account/address"
  | "readProductExport get /product-export/{accessKey}/{fileName}"
  | "cancelOrder post /order/state/cancel"
  | "readOrder post /order"
  | "orderSetPayment post /order/payment"
  | "orderDownloadFile get /order/download/{orderId}/{downloadId}"
  | "readSitemap get /sitemap"
  | "readLanguages post /language"
  | "readSeoUrl post /seo-url"
  | "handlePaymentMethod post /handle-payment"
  | "readCountryState post /country-state/{countryId}"
  | "postScriptStoreApiRoute post /script/{hook}"
  | "readShippingMethod post /shipping-method?onlyAvailable"
  | "readCurrency post /currency"
  | "getCustomerGroupRegistrationInfo get /customer-group-registration/config/{customerGroupId}"
  | "readCategoryList post /category"
  | "readCategory post /category/{navigationId}?slots"
  | "readContext get /context"
  | "updateContext patch /context"
  | "readPaymentMethod post /payment-method"
  | "searchPage post /search"
  | "readCart get /checkout/cart?name"
  | "deleteCart delete /checkout/cart"
  | "addLineItem post /checkout/cart/line-item"
  | "removeLineItem delete /checkout/cart/line-item?ids"
  | "updateLineItem patch /checkout/cart/line-item"
  | "createOrder post /checkout/order"
  | "readLandingPage post /landing-page/{landingPageId}"
  | "download post /document/download/{documentId}/{deepLinkCode}"
  | "readProductListing post /product-listing/{categoryId}"
  | "readCountry post /country";
