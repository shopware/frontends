import type { Plugin } from "vite";
import { basename } from "path";
import {
  normalizeString,
  getParametersTable,
  getToggleContainer,
  getStackBlitzExampleEmbedUrl,
  Property,
} from ".";

import { getWrappedCodeBlock, replacer } from "./string";
import {
  extractType,
  removeRedundantItems,
  SourceResolver,
  TypesParser,
} from "./lib";

function isFileMd(fileName: string): boolean {
  return !!fileName.match(/\.md\b/);
}

function getFunctionNameFromFilePath(filePath: string): string {
  return basename(filePath, ".md");
}
/**
 * Plugin configuration for specific directory
 */
export type PluginDirConfig = {
  // package alias (not prefixed by @shopware-pwa)
  // if not provided, the autogenerated examples will be disabled
  autogenExampleAlias?: string;
  // path to the directory with the functions source files
  functions: string;
  // path to the directory with the types source files
  types: string;
};
/**
 * Plugin configuration
 *
 * @param config.rootDir - root directory of the project
 */
export type PluginConfig = {
  rootDir: string;
  dirs: PluginDirConfig[];
};

export function MdTypesTransformer(config: PluginConfig): Plugin {
  return {
    name: "vueuse-md-api-table-transform",
    enforce: "pre",

    async transform(code, id) {
      if (!isFileMd(id)) {
        return null;
      }
      const functionName = getFunctionNameFromFilePath(id);

      const {
        typesMetadata,
        activeConfig: dirActive,
        linkExternalTypes,
      } = await SourceResolver({
        filename: functionName,
        rootDir: config.rootDir,
        sourcePaths: config.dirs,
      });

      if (!typesMetadata || !dirActive) {
        return code;
      }

      const {
        getFunctionSignature,
        getUsageCodeBlock,
        getFunctionParameters,
        getFunctionDescription,
        getFunctionReturnType,
        getFunctionReturnTypeSignature,
        getTypesTable,
        hasProperties,
        hasMethods,
      } = TypesParser({
        metadata: typesMetadata,
      });

      let description = "## Definition\n\n";
      description += getFunctionDescription(functionName) || "";

      // FUNCTION USAGE EXAMPLE
      const usageCodeBlock = getUsageCodeBlock();
      if (usageCodeBlock.length > 1) {
        description += `\n\n### Basic usage`;
        description += `\n\n${usageCodeBlock}`;
      }

      // FUNCTION SIGNATURE
      const functionSignature = getFunctionSignature(functionName);
      if (functionSignature) {
        description += "\n### Signature\n\n";
        description += `\n\n${getWrappedCodeBlock(functionSignature)}`;
      }

      // FUNCTION PARAMETERS TABLE
      const functionParameters = getFunctionParameters(functionName);
      if (functionParameters?.length) {
        const parameters = [];
        for (const param of functionParameters) {
          const extractedType = extractType(param.type);
          const type =
            (extractedType &&
              (await linkExternalTypes(
                normalizeString(param.type),
                removeRedundantItems(extractedType)
              ))) ||
            normalizeString(param.type);

          parameters.push({
            key: `<strong>${param.name}</strong>`,
            type: type,
            description: normalizeString(param.summary),
          });
        }
        const paramsTable = getParametersTable(parameters);
        description += "\n### Parameters";
        description += `\n\n${paramsTable}`;
      }

      // FUNCTION RETURN TYPE
      const functionReturnType = getFunctionReturnType(functionName) || "";
      if (functionReturnType) {
        const signature = getFunctionReturnTypeSignature(functionReturnType);
        description += "\n### Return type\n";
        description +=
          (signature &&
            getToggleContainer(
              getWrappedCodeBlock(signature),
              `See <span style="color:#FFCB6B;">${normalizeString(
                functionReturnType
              )}</span>`
            )) ||
          getWrappedCodeBlock(functionReturnType);
      }

      /**
       * Building API section
       */
      let apiSection = "";
      // helper to find and link internal types
      async function transformRow(row: Property) {
        const extractedType = extractType(row.returnType);
        return {
          key: `<strong>${row.name}</strong>`,
          type:
            (extractedType &&
              (await linkExternalTypes(
                normalizeString(row.returnType),
                removeRedundantItems(extractedType)
              ))) ||
            normalizeString(row.returnType),
          description: normalizeString(row.summary).replace(
            /(\r\n|\n|\r)/gm,
            ""
          ),
        };
      }
      // PROPERTIES TABLE
      if (hasProperties()) {
        apiSection += "\n### Properties\n";

        apiSection += await getTypesTable("properties", transformRow);
      }
      // METHODS TABLE
      if (hasMethods()) {
        apiSection += "\n\n### Methods\n";
        apiSection += await getTypesTable("methods", transformRow);
      }

      if (!hasMethods() && dirActive.autogenExampleAlias) {
        const openPath = `?packageName=@shopware-pwa/${dirActive.autogenExampleAlias}&async=1&functionName=${functionName}`;
        apiSection += "\n## Usage example\n\n";
        apiSection +=
          ":::warning\nExample is generated automatically. Sometimes it's required to be adjusted to your needs.\n\n:::\n\n";

        apiSection += `
[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](${getStackBlitzExampleEmbedUrl(
          {
            openPath,
            githubTreeUrl:
              "https://stackblitz.com/github/shopware/frontends/tree/main/examples/example-builder",
          }
        )})`;
      }

      code = replacer(
        code,
        description + apiSection,
        "PLACEHOLDER_DESCRIPTION",
        "tail"
      );

      return code;
    },
  };
}
