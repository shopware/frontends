diff --git a/dist/changesets-apply-release-plan.cjs.js b/dist/changesets-apply-release-plan.cjs.js
index af74e1a5fa3aaf90ccef4f3e48e620c068814649..15ee8e67b92b88be2b3fc7b80bbda1920cafb18f 100644
--- a/dist/changesets-apply-release-plan.cjs.js
+++ b/dist/changesets-apply-release-plan.cjs.js
@@ -14,6 +14,7 @@ var getVersionRangeType = require('@changesets/get-version-range-type');
 var Range = require('semver/classes/range');
 var semverPrerelease = require('semver/functions/prerelease');
 var semverSatisfies = require('semver/functions/satisfies');
+var semverValidRange = require("semver/ranges/valid");
 var startCase = require('lodash.startcase');
 
 function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }
@@ -45,6 +46,7 @@ var prettier__default = /*#__PURE__*/_interopDefault(prettier);
 var getVersionRangeType__default = /*#__PURE__*/_interopDefault(getVersionRangeType);
 var Range__default = /*#__PURE__*/_interopDefault(Range);
 var semverPrerelease__default = /*#__PURE__*/_interopDefault(semverPrerelease);
+var semverValidRange__default = /*#__PURE__*/ _interopDefault(semverValidRange);
 var semverSatisfies__default = /*#__PURE__*/_interopDefault(semverSatisfies);
 var startCase__default = /*#__PURE__*/_interopDefault(startCase);
 
@@ -139,13 +141,16 @@ function versionPackage(release, versionsToUpdate, {
           depCurrentVersion = workspaceDepVersion;
         }
 
-        if ( // an empty string is the normalised version of x/X/*
+        if (
+        semverValidRange__default.default(depCurrentVersion) !== null &&
+        // an empty string is the normalised version of x/X/*
         // we don't want to change these versions because they will match
         // any version and if someone makes the range that
         // they probably want it to stay like that...
-        new Range__default["default"](depCurrentVersion).range !== "" || // ...unless the current version of a dependency is a prerelease (which doesn't satisfy x/X/*)
+        (new Range__default['default'](depCurrentVersion).range !== "" || // ...unless the current version of a dependency is a prerelease (which doesn't satisfy x/X/*)
         // leaving those as is would leave the package in a non-installable state (wrong dep versions would get installed)
-        semverPrerelease__default["default"](version) !== null) {
+        semverPrerelease__default['default'](version) !== null
+        )) {
           let newNewRange = snapshot ? version : `${getVersionRangeType__default["default"](depCurrentVersion)}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
diff --git a/dist/changesets-apply-release-plan.esm.js b/dist/changesets-apply-release-plan.esm.js
index 69243cbbeb44ac28b8fe83f285174b9b3481c837..140e3159bfb282baa8a5c3f3222189677daa7e2a 100644
--- a/dist/changesets-apply-release-plan.esm.js
+++ b/dist/changesets-apply-release-plan.esm.js
@@ -10,6 +10,7 @@ import getVersionRangeType from '@changesets/get-version-range-type';
 import Range from 'semver/classes/range';
 import semverPrerelease from 'semver/functions/prerelease';
 import semverSatisfies from 'semver/functions/satisfies';
+import semverValidRange from "semver/ranges/valid";
 import startCase from 'lodash.startcase';
 
 /**
@@ -103,13 +104,16 @@ function versionPackage(release, versionsToUpdate, {
           depCurrentVersion = workspaceDepVersion;
         }
 
-        if ( // an empty string is the normalised version of x/X/*
+        if (
+        semverValidRange(depCurrentVersion) !== null &&
+        // an empty string is the normalised version of x/X/*
         // we don't want to change these versions because they will match
         // any version and if someone makes the range that
         // they probably want it to stay like that...
-        new Range(depCurrentVersion).range !== "" || // ...unless the current version of a dependency is a prerelease (which doesn't satisfy x/X/*)
+        (new Range(depCurrentVersion).range !== "" || // ...unless the current version of a dependency is a prerelease (which doesn't satisfy x/X/*)
         // leaving those as is would leave the package in a non-installable state (wrong dep versions would get installed)
-        semverPrerelease(version) !== null) {
+        semverPrerelease(version) !== null
+        )) {
           let newNewRange = snapshot ? version : `${getVersionRangeType(depCurrentVersion)}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
