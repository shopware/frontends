# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  tags:
    - t3.medium
  cache: &cache
    key: pnpm-lock.yaml
    paths:
      - .pnpm-store
      - ./node_modules
    policy: pull
image: node:18.3.0

stages: # List of stages for jobs, and their order of execution
  - init
  - build
  - deploy
  - test

before_script:
  - curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@7
  - pnpm config set store-dir .pnpm-store

init: # This job runs in the init stage, which runs first.
  stage: init
  script:
    - pnpm install
  cache:
    <<: *cache
    policy: pull-push

build-job: # This job runs in the build stage, which runs first.
  stage: build
  needs:
    - job: init
      artifacts: false
  interruptible: true
  script:
    - pnpm install
    - pnpm run build

unit-test-job: # This job runs in the test stage.
  stage: build # It only starts when the job in the build stage completes successfully.
  needs:
    - job: init
      artifacts: false
  interruptible: true
  script:
    - pnpm install
    - pnpm run test

commitlint-test-job: # This job runs in the test stage.
  stage: build # It only starts when the job in the build stage completes successfully.
  needs:
    - job: init
      artifacts: false
  interruptible: true
  script:
    - pnpm install
    - echo "${CI_COMMIT_MESSAGE}" | pnpm exec commitlint

lint-test-job: # This job also runs in the test stage.
  stage: build # It can run at the same time as unit-test-job (in parallel).
  needs:
    - job: init
      artifacts: false
  script:
    - pnpm install
    - pnpm run build --filter='./packages/*'
    - pnpm run lint

deploy-job: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  variables:
    VERCEL_ORG_ID: $VERCEL_ORG_ID
    VERCEL_PROJECT_ID: $VERCEL_PROJECT_ID
    IS_PROD_FLAG: ""
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables: # Override IS_PROD_FLAG defined
        IS_PROD_FLAG: "--prod" # at the job level.
    - if: $CI_COMMIT_BRANCH
  script:
    - echo "Building! $IS_PROD_FLAG"
    - pnpm install
    - pnpm exec vercel pull -t $VERCEL_TOKEN --scope $VERCEL_SCOPE
    - pnpm exec vercel build $IS_PROD_FLAG
    - rm -r ./.vercel/output
    - cp -r ./templates/vue-demo-store/.vercel/output ./.vercel/output
    - DYNAMIC_ENVIRONMENT_URL=$(pnpm exec vercel deploy --prebuilt --confirm -t $VERCEL_TOKEN --scope $VERCEL_SCOPE $IS_PROD_FLAG)
    - echo "Deployed to $DYNAMIC_ENVIRONMENT_URL"
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $DYNAMIC_ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env

e2e tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.25.1-focal
  needs:
    - job: deploy-job
      artifacts: true
  script:
    - echo "BASE_E2E_URL=$DYNAMIC_ENVIRONMENT_URL" >> .env
    - pnpm install
    - pnpm test:e2e
  artifacts:
    when: on_failure
    paths:
      - apps/e2e-tests/playwright-report/
